[{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"about-morphoregions","dir":"Articles","previous_headings":"","what":"About MorphoRegions","title":"MorphoRegions","text":"MorphoRegions package built computationally identify regions (morphological, functional, etc.) serially homologous structures , limited , vertebrate backbone. Regions modeled segmented linear regressions segment corresponding region region boundaries (breakpoints) corresponding changes along serially homologous structure. optimal number regions breakpoint positions identified without priori assumptions. algorithm fits increasingly complex models (increasing number regions). given number regions, possible combinations breakpoint positions iteratively fitted. Maximum-likelihood methods used identify best model, described Gillet, Jones, Pierce (Review). Fig.1. MorphoRegions identifies regions serially-homologous structures fitting possible breakpoint positions given number region repeating method increasingly complex models. package updated version regions R-package Jones et al. (2018) expanded previous work Head Polly (2015). package provides improved computational methods (reduced time memory usage) allowing application larger datasets. Several features added including options perform non-exhaustive searches, run parallel computing, choose continuous discontinuous fitting methods, define minimum number vertebrae region, select best model using either AICc BIC, fit model multiple specimens. Plotting options also expanded.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"package-installation","dir":"Articles","previous_headings":"","what":"Package installation","title":"MorphoRegions","text":"package available CRAN can installed loaded using following code:","code":"install.packages(\"MorphoRegions\") library(MorphoRegions)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"preparing-the-data","dir":"Articles","previous_headings":"","what":"Preparing the data","title":"MorphoRegions","text":"Data provided dataframe row element serially-homologous structure (e.g., vertebra). One column contain positional information element (e.g., vertebral number) columns contain variables used calculate regions (e.g., morphological measurements). package comes four built-datasets. alligator, musm, dolphin contain measurements vertebrae alligator, mouse, dolphin. porpoise contains vertebral measurements three specimens harbor porpoises can used test fitting single model multiple specimens together (see ). Alligator mouse data Jones et al. (2018); dolphin porpoise data Gillet et al. (2022). dolphin dataset, first column contains positional information (vertebral number) columns contain morphological measurements taken vertebra. Prior analysis, data must processed object usable regions using process_measurements(). Data provided dataframe. pos argument used specify name index column containing positional information; unspecified, first column used default. Names indices columns containing variables can specified measurements argument. fillNA argument allows fill missing values dataset. Missing values can filled two successive elements (e.g., two successive vertebrae) using linear imputation (see Jones et al. (2018) details). fillNA argument set TRUE default.","code":"data(\"dolphin\")  head(dolphin) #>    Vertebra   Lc   Wc   Hc  Hnp  Wnp  Inp   Ha   Wa   Lm   Wm  Hm Hch Wch  Ltp #> 8         8 1.33 3.37 2.02 2.85 1.17 2.01 1.72 1.48 0.00 0.00 0.0   0   0 1.71 #> 9         9 1.46 3.67 2.10 3.20 1.63 2.01 1.44 1.65 0.00 0.00 0.0   0   0 1.51 #> 10       10 1.57 3.62 2.26 3.13 1.71 2.01 1.42 2.18 0.00 0.00 0.0   0   0 1.06 #> 11       11 1.71 3.75 2.24 3.07 1.71 2.01 1.38 1.25 0.56 0.38 1.7   0   0 1.03 #> 12       12 1.74 3.72 2.28 2.66 1.96 1.99 1.30 1.50 1.45 1.09 2.0   0   0 0.60 #> 13       13 1.82 3.92 2.28 2.61 1.74 1.88 1.29 1.74 1.86 1.12 2.0   0   0 0.37 #>     Wtp  Itp #> 8  1.67 1.57 #> 9  1.61 1.57 #> 10 1.90 1.57 #> 11 1.91 1.66 #> 12 1.71 1.57 #> 13 1.44 1.57 dolphin_data <- process_measurements(dolphin, pos = 1) class(dolphin_data) #> [1] \"regions_data\""},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"PCO","dir":"Articles","previous_headings":"","what":"Data ordination","title":"MorphoRegions","text":"allow analysis high dimensional datasets, including variety data types, Principal Coordinates Analysis (PCO), distance-based data ordination method, implemented svdPCO(). function relies distance matrix generated cluster::daisy(), tolerates missing values. Three types distance metric can used: Euclidean, Manhattan, Gower. Euclidean used variables similar (e.g., linear measures scale), similar PCA. Gower good combining different types continuous data (e.g., angles linear). PCO scores vertebra can plotted along respective position backbone (left) morphospace (right). Fig.2. Left: PCO scores vertebra along backbone PCO1 (top) PCO2 (bottom). Right: morphospace defined PCO1 2, points plotted numbers corresponding position vertebra along backbone.","code":"dolphin_pco <- svdPCO(dolphin_data, metric = \"gower\") #Plot PCOs along backbone for PC1 and 2: plot(dolphin_pco, 1:2)  # Plot morphospace of PC1 and 2: plot(dolphin_pco, pco_x = 1, pco_y = 2)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"data-reduction","dir":"Articles","previous_headings":"Data ordination","what":"Data reduction","title":"MorphoRegions","text":"regionalization analysis can performed PCO axes, ’s likely lower PCO axes mostly contain noise. number PCO axes retain analysis can selected using PCOselect(). Four different methods select PCOs available specified using method argument: \"manual\": number PCOs directly defined via scores argument \"variance\": PCO axes variance (defined ratio eigenvalue given axis sum eigenvalues) higher cutoff value (expressed value 0 1) retained \"max\": PCOs axes needed obtain maximum number regions segmented models tested must supplied results. criterion (AICc BIC) used maximize region score defined criterion \"boot\": PCO axes selected bootstrapping comparing observed eigenvalues eigenvalues randomized data retaining PCO axes eigenvalues higher values randomized data. using method, screeplot showing observed simulated eigenvalues can plotted. Note bootstrapping sensitive unequal variances variables used data scaled (setting scale = TRUE original call svdPCO()). Fig.3a. Graph region scores (left y-axis) cumulative variance (right y-axis) obtained varying number PCO axes included AICc (left graph) BIC (right graph). Blue triangles correspond region score obtained individual PCO axis orange circle region scores obtained cumulative number PCO axes. cumulated variance explained PCO axes represented grey curve. Fig.3b. Screeplot observed eigenvalues (line) eigenvalues randomized data (boxes). PCO axes 1 2 retained subsequent analyses.","code":"# Manual (keeping axes 1 to 3): PCOs <- PCOselect(dolphin_pco, method = \"manual\",                   scores = 3) PCOs #> A `regions_pco_select` object #> - PCO scores selected: 1, 2, 3 #> - Method: manual  # Variance (selecting axes with variance > 0.05): PCOs <- PCOselect(dolphin_pco, method = \"variance\",                   cutoff = .05) PCOs #> A `regions_pco_select` object #> - PCO scores selected: 1, 2 #> - Method: variance (cutoff: 0.05) # Max: regionresults <- calcregions(dolphin_pco, scores = 1:39, noregions = 4,                               minvert = 3, cont = TRUE, exhaus = TRUE,                              verbose = FALSE) PCOs <- PCOselect(dolphin_pco, method = \"max\",                   results = regionresults,                   criterion = \"bic\") PCOs #> A `regions_pco_select` object #> - PCO scores selected: 1 #> - Method: max (criterion: BIC) plot(PCOs) # Bootstrap: PCOs <- PCOselect(dolphin_pco, method = \"boot\") #> Bootstrapping... PCOs #> A `regions_pco_select` object #> - PCO scores selected: 1, 2 #> - Method: boot (500 replications) plot(PCOs)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"loadings","dir":"Articles","previous_headings":"Data ordination","what":"Loadings","title":"MorphoRegions","text":"Correlations original variables PCO axis obtained PCOload function. additional ‘Size’ variable corresponds mean value variables. Fig.4. Correlations original variables PCO axes 1 2.","code":"loadings <- PCOload(dolphin_pco, scores = PCOs) plot(loadings)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"regionalization-analysis","dir":"Articles","previous_headings":"","what":"Regionalization analysis","title":"MorphoRegions","text":"regionalization analysis performed three steps: Fitting possible models number regions requested Selecting best model number regions tested Selecting overall best model","code":""},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"SegRegFit","dir":"Articles","previous_headings":"Regionalization analysis","what":"Fitting segmented linear regressions","title":"MorphoRegions","text":"calcregions() fits possible combinations breakpoints (boundaries successive regions) number regions tested. analysis fit models PCO scores, output svdPCO() needs provided. number PCOs keep (supplied either vector output PCOselect()), maximum number regions test need provided scores noregions arguments, respectively. function also offers several optional arguments (see Model fitting options section details): minvert: define minimum number vertebrae (elements) region (see ) cont: choose fit either continuous fit (TRUE) discontinuous fit (FALSE) (see ) includebp: force breakpoint(s) fall supplied value(s) (see ) omitbp: exclude breakpoint(s) falling supplied value(s) (see ) exhaus: either fit possible combinations (TRUE) probable ones (FALSE) reduce computing time (see ) cl: option use parallel computation (see ) output function contains information parameters used run analysis total number models tested using summary function allows see many models possible many tested given number regions.","code":"regionresults <- calcregions(dolphin_pco, scores = PCOs, noregions = 5,                              minvert = 3, cont = TRUE,                               exhaus = TRUE, cl = NULL,                              verbose = FALSE) regionresults #> A `regions_results` object #>  - number of PCOs used: 2  #>  - number of regions: 1, 2, 3, 4, 5  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 28810  #> Use `summary()` to examine summaries of the fitting process. summary(regionresults) #>  Regions Possible Tested Saved Comp. method Saving method #>        1        1      1     1   Exhaustive           All #>        2       35     35    35   Exhaustive           All #>        3      528    528   528   Exhaustive           All #>        4     4495   4495  4495   Exhaustive           All #>        5    23751  23751 23751   Exhaustive           All"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"selecting-best-model-for-each-number-of-regions","dir":"Articles","previous_headings":"Regionalization analysis","what":"Selecting best model for each number of regions","title":"MorphoRegions","text":"modelselect() retains best model number regions tested. best models selected ones lowest residual sum squares (RSS). row output corresponds best model given number regions. Columns named BP give position region boundaries (breakpoints), value corresponding position last element (vertebra) given region. columns provide total residual sum squares across PC axes (sumRSS) residual sum square PC axis individually (RSS.). example , model three regions, first region encompasses vertebrae 8 (first vertebra dataset) 23, second contains vertebrae 24 29, last region contains vertebrae 30 47 (last vertebra dataset).","code":"models <- modelselect(regionresults) models #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS RSS.1 RSS.2 #>        1    .    .    .    .  1.898 1.456 0.441 #>        2   26    .    .    .  0.413 0.105 0.308 #>        3   23   29    .    .  0.147 0.092 0.055 #>        4   23   30   40    .  0.073 0.034 0.040 #>        5   23   27   34   40  0.046 0.026 0.020"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"selecting-best-overall-model-and-region-score","dir":"Articles","previous_headings":"Regionalization analysis","what":"Selecting best overall model and region score","title":"MorphoRegions","text":"modelsupport() find best overall models across models returned modelselect(). best model calculated using AICc BIC allows selection best fit model penalizing models complex. See Jones et al. (2018) AICc calculations Gillet, Jones, Pierce (Review) BIC calculations. Models ordered best worst fit. , AICc BIC find model 5 regions best overall model following regions: region1: vertebrae 8 23, region2: vertebrae 24 27, region3: 28 34, region4: 35 40, region5: 41 47. addition returning best models, function also calculates region score, continuous value accounting fact models different number regions fit data well. region score calculated sum number region model weighted respective AICc/BIC weight. example, region score BIC calculated 5*1+4*0+3*0+2*0+1*0=55*1 + 4*0 + 3*0 + 2*0 + 1*0=5.","code":"supp <- modelsupport(models) supp #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS     AICc deltaAIC model_lik Ak_weight #>        5   23   27   34   40  0.046 -556.036    0.000         1         1 #>        4   23   30   40    .  0.073 -528.096   27.940         0         0 #>        3   23   29    .    .  0.147 -480.952   75.084         0         0 #>        2   26    .    .    .  0.413 -405.787  150.250         0         0 #>        1    .    .    .    .  1.898 -290.769  265.267         0         0 #> Region score: 5  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS      BIC deltaBIC model_lik BIC_weight #>        5   23   27   34   40  0.046 -526.559    0.000         1          1 #>        4   23   30   40    .  0.073 -502.645   23.914         0          0 #>        3   23   29    .    .  0.147 -460.321   66.238         0          0 #>        2   26    .    .    .  0.413 -390.668  135.891         0          0 #>        1    .    .    .    .  1.898 -281.774  244.784         0          0 #> Region score: 5"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"adding-more-regions","dir":"Articles","previous_headings":"Regionalization analysis","what":"Adding more regions","title":"MorphoRegions","text":"example , model 5 regions far best one (AICc/BIC weight = 1). cases complex model best model, ’s likely complex models fit data better. addregions() allows one fit additional models without need recompute models fewer regions. Identifying best model now models 6 7 regions added: best overall model now model 7 regions using AICc BIC. Since best model still complex model, additional model(s) seven regions fitted (run computational reasons).","code":"regionresults <- addregions(regionresults, noregions = 6:7, exhaus = TRUE,                             verbose = FALSE) summary(regionresults) #>  Regions Possible Tested  Saved Comp. method Saving method #>        1        1      1      1   Exhaustive           All #>        2       35     35     35   Exhaustive           All #>        3      528    528    528   Exhaustive           All #>        4     4495   4495   4495   Exhaustive           All #>        5    23751  23751  23751   Exhaustive           All #>        6    80730  80730  80730   Exhaustive           All #>        7   177100 177100 177100   Exhaustive           All models <- modelselect(regionresults) supp <- modelsupport(models) supp #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS     AICc deltaAIC model_lik #>        7   19   24   27   35   38   41  0.021 -596.668    0.000     1.000 #>        6   19   24   27   34   40    .  0.026 -590.493    6.174     0.046 #>        5   23   27   34   40    .    .  0.046 -556.036   40.632     0.000 #>        4   23   30   40    .    .    .  0.073 -528.096   68.572     0.000 #>        3   23   29    .    .    .    .  0.147 -480.952  115.715     0.000 #>        2   26    .    .    .    .    .  0.413 -405.787  190.881     0.000 #>        1    .    .    .    .    .    .  1.898 -290.769  305.899     0.000 #>  Ak_weight #>      0.956 #>      0.044 #>      0.000 #>      0.000 #>      0.000 #>      0.000 #>      0.000 #> Region score: 6.96  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS      BIC deltaBIC model_lik #>        7   19   24   27   35   38   41  0.021 -562.017    0.000     1.000 #>        6   19   24   27   34   40    .  0.026 -557.902    4.116     0.128 #>        5   23   27   34   40    .    .  0.046 -526.559   35.459     0.000 #>        4   23   30   40    .    .    .  0.073 -502.645   59.373     0.000 #>        3   23   29    .    .    .    .  0.147 -460.321  101.697     0.000 #>        2   26    .    .    .    .    .  0.413 -390.668  171.349     0.000 #>        1    .    .    .    .    .    .  1.898 -281.774  280.243     0.000 #>  BIC_weight #>       0.887 #>       0.113 #>       0.000 #>       0.000 #>       0.000 #>       0.000 #>       0.000 #> Region score: 6.89"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"model-performance-r2","dir":"Articles","previous_headings":"Regionalization analysis","what":"Model performance (R2R^2)","title":"MorphoRegions","text":"modelperf() returns univariate (PC axis individually) multivariate (PC axes) R2R^2 adjusted R2R^2 given model. R2R^2 can calculated best model (model = 1) given criterion (criterion argument), also second best (model = 2), third best (model = 3), etc. case, output modelsupport() must supplied. Alternatively, also possible calculate R2R^2 user-defined model using bps argument specifying position breakpoints (region boundaries) model test.","code":"modelperf(dolphin_pco, scores = PCOs, modelsupport = supp,           criterion = \"bic\", model = 1) #> Breakpoints: 19, 24, 27, 35, 38, 41  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.996   0.995 #> PCO.2 0.982   0.978 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.993   0.992 modelperf(dolphin_pco, scores = 1:3,           bps = c(15, 24, 37), criterion = \"bic\") #> Breakpoints: 15, 24, 37  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.970   0.966 #> PCO.2 0.646   0.606 #> PCO.3 0.682   0.646 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.901   0.890"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"breakpoint-position-variability","dir":"Articles","previous_headings":"Regionalization analysis","what":"Breakpoint position variability","title":"MorphoRegions","text":"calcBPvar() calculates variability breakpoint position given number regions (noregions argument) using weighted means standard deviation based either AICc BIC weight (defined criterion argument). variability can calculated given proportion best models across fitted models number regions (pct argument). example calculating variability breakpoint positions models 7 regions, using top 10% best models evaluated BIC criterion. Note using output calcBPvar plotting, breakpoint positions rounded closest whole number. example , breakpoints 19, 24, 26, 35, 38, 41. Since calcregions returns whole numbers breakpoint values, weighted mean breakpoint position 23.97 involves models found breakpoint value 24 (corresponding region break vertebrae 24 25).","code":"bpvar <- calcBPvar(regionresults, noregions = 7,                    pct = 0.1, criterion = \"bic\") bpvar #>         BP 1   BP 2   BP 3   BP 4   BP 5   BP 6 #> wMean 19.214 23.973 26.983 34.911 37.965 41.017 #> wSD    0.693  0.347  0.227  0.645  0.349  0.238 #> - Computed using top 10% of models"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"visualizing-results","dir":"Articles","previous_headings":"","what":"Visualizing results","title":"MorphoRegions","text":"MorphoRegions offers two main plotting options visualize results: 1) scatter plots showing PC scores element (vertebra) along structure (backbone) segmented linear regressions, 2) vertebral maps showing regional identity element (vertebra).","code":""},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"segmented-linear-regression-plots","dir":"Articles","previous_headings":"Visualizing results","what":"Segmented linear regression plots","title":"MorphoRegions","text":"scatter plots segmented linear regressions can plotted using plotsegreg(). output svdPCO() number PC axis plot (scores argument) must supplied. function can either used plot best (second best, third best, etc.) model (model argument) given criterion, supplying output modelsupport(). Alternatively, specific model can also plotted providing position breakpoints (bps argument). Fig.5. Scatterplots showing PCO scores segmented regressions PC1 PC2 best model (left) PC1 4 regions model breakpoints vertebrae 15, 24, 37 (right).","code":"# Plot regressions for best model: plotsegreg(dolphin_pco, scores = 1:2,            modelsupport = supp,            criterion = \"bic\",            model = 1)  # Plot regressions for a specific model: plotsegreg(dolphin_pco, scores = 1,            bps = c(15, 24, 37),            cont = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"vertebral-maps","dir":"Articles","previous_headings":"Visualizing results","what":"Vertebral maps","title":"MorphoRegions","text":"plotvertmap() produces vertebral maps, plots rectangle corresponds element (.e., vertebra) color-coded according region belongs. function provides many different plotting options. function requires regions_data (process_measurements()), regions_pco (svdPCO()), regions_sims (simregions(); see ) provided. positional information element (.e., vertebral number) extracted one objects. regional identity element can defined either providing regions_modelsupport object (modelsupport()) directly specifying position breakpoints model. Fig.6. Vertebral maps best fit model using BIC criterion (top), 2nd best fit model using AICc criterion (middle), user-defined model breakpoints vertebrae 12, 17, 20, 30 (bottom). seven first elements (rectangles corresponding one vertebra) grayed included analyses. possible hide elements excluded analyses setting dropNA argument TRUE. Variability breakpoint positions regions can also added either supplying regions_BPvar object (calcBPvar()) user-defined vector. regions_BPvar object supplied, position breakpoints corresponds weighted mean position computed calcBPvar(). Fig.7. Vertebral maps showing breakpoint position variability calculated calcBPvar (top) values directly supplied function (bottom). Dots correspond breakpoint position horizontal lines correspond standard deviation breakpoint position. facilitate interpretation regions, function offers plotting options. possible add boundaries plot, boundaries traditional anatomical regions (thoraco-lumbar, lumbo-caudal, etc). Boundary positions can supplied vector reg.lim argument, numeric value corresponding position last element boundary. example, dolphin dataset, thoraco-lumbar, lumbo-caudal, caudal-fluke transitions fall vertebrae 17-18, 25-26, 35-36, respectively. also possible plot positional info element (vertebra) number corresponding rectangle. Fig.8. Vertebral maps anatomical region boundaries represented vertical bars (top) vertebral position labelled corresponding rectangle (bottom). default, function plots elements (vertebrae) count (vertebral count) also possible plot elements percentage total number elements (setting type = \"percent\"). cases, element plot size. Alternatively, possible scale rectangles plot according relative size element supplying vector containing size information centraL argument. example , rectangles scaled according centrum length vertebra (supplied Lc column original dataset). Fig.9. Vertebral maps plotting vertebrae percentage total vertebral count (top), scaled centrum length relative total length absolute value (middle), scaled centrum length percentage (bottom). Finally, possible change colors used region block.cols argument. Colors can either supplied vector, case regions color-coded following order colors supplied vector. Alternatively, ’s also possible define set colors per block, block defined block.lim argument. case, colors must supplied named list, element list containing vector color given block. instance, dolphin data, define regions precaudal block (thoracic + lumbar) colors shades beige/brown, regions caudal block (caudal + fluke) color shades blue. Since lumbo-caudal transition falls vertebrae 25 26, ’ll define two blocks limit vertebra 25. Fig.10. Vertebral maps regions colored user-defined palette using viridis (top) custom palettes different blocks (bottom). coloring regions blocks, regions spanning one block allocated block majority elements belong. example , 3rd region one vertebra precaudal block two caudal block, thus region considered 1st region caudal block. Vertebral maps created using ggplot2 meaning can modified similarly ggplot plots. instance, possible create single plot multiple vertebral maps patchwork package. Fig.11. Vertebral maps alligator, mouse, dolphin stacked single figure.","code":"#Plot vertebral map using best BPs from modelsupport (BIC) plotvertmap(dolphin_pco, name = \"Dolphin A\",             modelsupport = supp, criterion = \"bic\", model = 1)  #Plot vertebral map using 2nd best BPs from modelsupport (AICc) plotvertmap(dolphin_pco, name = \"Dolphin B\",             modelsupport = supp, criterion = \"aic\", model = 2)  #Plot vertebral map using arbitrary breakpoints plotvertmap(dolphin_pco, name = \"Dolphin C\",             bps = c(12, 17, 20, 30)) # BP variability from calcBPvar: plotvertmap(dolphin_pco, name = \"Dolphin\",            bpvar = bpvar, dropNA = TRUE)  # BP variability from user-defined vector, plotting SD bars in grey: plotvertmap(dolphin_pco, name = \"Dolphin\",             modelsupport = supp,             criterion = \"bic\",             bp.sd = c(2.2, 1.4, 2.5, 1.5, 2.1, 0.8),             sd.col=\"#636363\", dropNA = TRUE) # Remove missing vertebrae, add vertebrae number    # and add thoraco-lumbar, lumbo-caudal, and caudal-fluke boundaries: plotvertmap(dolphin_pco, name = \"Dolphin\", modelsupport = supp,             criterion = \"bic\", dropNA = TRUE,             reg.lim = c(17 ,25, 35),             lim.col = c(\"red\", \"blue\", \"green\"))  # Add positional info of each vertebra: plotvertmap(dolphin_pco, name = \"Dolphin\", modelsupport = supp,             criterion = \"bic\", dropNA = TRUE, text = TRUE) # Plot vertebrae as percentage of total count: plotvertmap(dolphin_pco, name = \"Dolphin\",             type = \"percent\",             modelsupport = supp, criterion = \"bic\",             dropNA = TRUE, reg.lim = c(17, 25, 35))  # Scale vertebrae relative to their centrum length (scale in cm): plotvertmap(dolphin_pco, name = \"Dolphin\",             type = \"count\", centraL = \"Lc\",             modelsupport = supp, criterion = \"bic\",             dropNA = TRUE, reg.lim = c(17, 25, 35))  # Scale vertebrae relative to their centrum length (scale in % total length): plotvertmap(dolphin_pco, name = \"Dolphin\",             type = \"percent\", centraL = \"Lc\",             modelsupport = supp, criterion = \"bic\",             dropNA = TRUE, reg.lim = c(17, 25, 35),             lim.col = \"grey\") # Manually color-coding each region using the viridis palette: library(viridisLite) nreg <- supp$Model_support_BIC[1,1]  # get nbr of regions cols <- viridis(n = nreg)  plotvertmap(dolphin_pco, name = \"Dolphin\",             type = \"percent\", centraL = \"Lc\",             modelsupport = supp, criterion = \"bic\",             dropNA = TRUE,              reg.lim = c(17, 25, 35),             block.cols = cols)  # Color code regions by block (precaudal vs caudal): blockcols <- list(PreCaudal = c(\"#BF812D\",\"#8C510A\",\"#543005\"),                   Caudal = c(\"#C7EAE5\",\"#80CDC1\",\"#35978F\",\"#01665E\",\"#236E30\"))  plotvertmap(dolphin_pco, name = \"Dolphin\",             type = \"percent\", centraL = \"Lc\",             modelsupport = supp, criterion = \"bic\",             dropNA = TRUE,              reg.lim = c(17, 25, 35),             block.cols = blockcols, block.lim = 25) # Run regions analysis on alligator and mouse data: dat_alligator <- process_measurements(alligator, pos = 1) pco_alligator <- svdPCO(dat_alligator, \"gower\") regions_alligator <- calcregions(pco_alligator, scores = 1:3,                                  noregions = 5, verbose = FALSE) supp_alligator <- modelsupport(modelselect(regions_alligator))  dat_mouse <- process_measurements(musm, pos = 1) pco_mouse <- svdPCO(dat_mouse, \"gower\") regions_mouse <- calcregions(pco_mouse, scores = 1:3,                              noregions = 5, verbose = FALSE) supp_mouse <- modelsupport(modelselect(regions_mouse))  # Create vertebral maps: vertmaps <- list(alligator = plotvertmap(pco_alligator, name = \"Alligator\", centraL = \"CL\",                                          modelsupport = supp_alligator, type = \"percent\",                                          dropNA = TRUE),                  mouse = plotvertmap(pco_mouse, name = \"Mouse\", centraL= \"CL\",                                       modelsupport = supp_mouse, type = \"percent\",                                      dropNA = TRUE),                  dolphin = plotvertmap(dolphin_pco, name = \"Dolphin\", centraL= \"Lc\",                                        modelsupport = supp, type = \"percent\",                                        dropNA = TRUE))  # Remove x axis for plots except bottom one: library(ggplot2) for (i in seq_along(vertmaps)[-length(vertmaps)]){   vertmaps[[i]] <- vertmaps[[i]] + theme(axis.text.x = element_blank(),                                          axis.ticks.x = element_blank(),                                          axis.title.x = element_blank()) }  # Stack plots together: library(patchwork) wrap_plots(vertmaps) + plot_layout(ncol = 1, byrow = FALSE)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"FittingOptions","dir":"Articles","previous_headings":"","what":"Model fitting parameters","title":"MorphoRegions","text":"briefly described section , several different parameters available fitting segmented linear regressions.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"ContDisc","dir":"Articles","previous_headings":"Model fitting parameters","what":"Continuous vs. discontinuous fit","title":"MorphoRegions","text":"older regions package automatically fitted discontinuous segments, MorphoRegions allows users choose continuous discontinuous fit. continuous fit, first point segment aligns last point preceding segment, modeling gradational variation without large jumps segments. continuous fit forces continuity successive segments, puts constrains model fitting compared discontinuous fit. Depending dataset, one fitting method might appropriate. ’s advised visually inspect distributions elements along structure using PCO scores implemented analysis (Fig.2) choosing option. Fig.12. Best fit PCOs 1 2 4 region models breakpoints 15, 24, 37, using discontinuous model (left) continuous model (right).","code":"# Plot a discontinuous model: plotsegreg(dolphin_pco, scores = 1:2,            bps = c(15, 24, 37),            cont = FALSE)  # Plot a continuous model: plotsegreg(dolphin_pco, scores = 1:2,            bps = c(15, 24, 37),            cont = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"MinVert","dir":"Articles","previous_headings":"Model fitting parameters","what":"Minimum number of elements per region","title":"MorphoRegions","text":"default, minimum number elements (vertebrae) region set 3. parameter can, however, changed minvert argument calcregions function. Note setting minimum value 2 might results linear segments made two points, perfect fit (RSS=0 segments) might artificially increase goodness fit. Fig.13. Best fit PCO 1 models 5 regions minimum 2 vertebrae per region (left) 4 vertebrae per region (right). setting minimum number vertebrae per region 2, best fit model (using BIC) 5 regions model RSS = 0.001 BIC weight = 0.99. forcing minimum number vertebrae per region 4, best fit model (using BIC) 4 regions model RSS = 0.002 BIC weight = 0.61. 5 regions model 3rd best model (3 regions model) RSS = 0.002 BIC weight = 0.02.","code":"# Fitting up to 5 regions for alligator data with 2 vertebrae minimum per segment: reg.all.2 <- calcregions(pco_alligator, scores = 1, minvert = 2, noregions = 5,                          cont = FALSE, verbose = FALSE) plotsegreg(pco_alligator, scores = 1,            modelsupport = modelsupport(modelselect(reg.all.2)),            criterion = \"bic\")  # Fitting up to 5 regions for alligator data with 4 vertebrae minimum per segment: reg.all.4 <- calcregions(pco_alligator, scores = 1, minvert = 4, noregions = 5,                          cont = FALSE, verbose = FALSE) plotsegreg(pco_alligator, scores = 1,            modelsupport = modelsupport(modelselect(reg.all.4)),            criterion = \"bic\")"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"ForceBP","dir":"Articles","previous_headings":"Model fitting parameters","what":"Forcing or preventing specific breakpoint positions","title":"MorphoRegions","text":"omitbp includebp arguments calcregions allows one prevent force breakpoint(s) specific position(s), respectively. Fig.14. Best fit PCO 1 2 models 5 regions preventing breakpoint thoraco-lumbar region (vertebrae 8 25) (top) forcing breakpoints anatomical region boundaries (vertebrae 17, 25, 35) (bottom).","code":"# Fit models for dolphin preventing any BP in the thoracic and lumbar regions: reg.dol.noBP <- calcregions(dolphin_pco, scores = PCOs, noregions = 5,                             omitbp = 8:25, verbose = FALSE) plotsegreg(dolphin_pco, scores = PCOs,            modelsupport = modelsupport(modelselect(reg.dol.noBP)),            criterion = \"bic\")  # Fit models for dolphin forcing BPs at anatomical region boundaries: reg.dol.forceBP <- calcregions(dolphin_pco, scores = PCOs, noregions = 5,                                includebp = c(17, 25, 35), verbose = FALSE) plotsegreg(dolphin_pco, scores=PCOs,            modelsupport = modelsupport(modelselect(reg.dol.forceBP)),            criterion = \"bic\")"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"Exhaus","dir":"Articles","previous_headings":"Model fitting parameters","what":"Exhaustive vs. non-exhaustive search","title":"MorphoRegions","text":"MorphoRegions implemented fit numerous models efficiently enough run minutes computers. However, case quite complex models (numerous elements, regions fit, /PCO scores), computational time can quickly increase. speed process, possible fit models non-exhaustive way setting exhaus = FALSE calcregions(). non-exhaustive search used, possible models 1 2 regions models fitted, 3 regions, algorithm fit subset possible models. given number regions, nn, optimal positions breakpoints models n−1n-1 regions used starting point define subset models fit. non-exhaustive search, summary() function used calcregions() returns, number regions, total number possible models, number models actually fitted, number models saved output order limit memory usage. variability breakpoint positions calculated non-exhaustive search output, proportion best models used calculate variability corresponds given percentage possible models. ’s therefore possible cases number models saved non-exhaustive search lower requested percentage. cases, variability calculated saved models warning message returned. average variability breakpoint position calculated using weighted means SD, respectively, results usually remain similar obtained using full top 10% (models fitted exhaustive search) unless numerous models fit data well.","code":"reg.dol.Nex <- calcregions(dolphin_pco, scores = PCOs, noregions = 5,                            exhaus = FALSE, verbose = FALSE) summary(reg.dol.Nex) #>  Regions Possible Tested Saved Comp. method Saving method #>        1        1      1     1   Exhaustive           All #>        2       35     35    35   Exhaustive           All #>        3      528    528   115   Non-exhaus          SD/2 #>        4     4495   3220   421   Non-exhaus          SD/2 #>        5    23751  11648   424   Non-exhaus          SD/2 calcBPvar(reg.dol.Nex, noregions = 5, pct = 0.1, criterion = \"bic\") #> Warning: Number of models provided lower than percentage requested. #> Weighted means and SD calculated on: 1.79% of total number of models. #>         BP 1   BP 2   BP 3   BP 4 #> wMean 23.154 27.354 33.985 39.722 #> wSD    0.524  0.509  0.677  0.630 #> - Computed using top 1.79% of models calcBPvar(regionresults, noregions = 5, pct = 0.1, criterion = \"bic\") #>         BP 1   BP 2   BP 3   BP 4 #> wMean 23.154 27.354 33.985 39.722 #> wSD    0.524  0.509  0.678  0.630 #> - Computed using top 10% of models"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"Para","dir":"Articles","previous_headings":"Model fitting parameters","what":"Parallel computing","title":"MorphoRegions","text":"specimens high number elements /numerous regions computing non-exhaustive searches still time consuming, cl argument calcregions() allows one implement parallel computing. See cl argument pbapply::pblapply() details can specified. , request 6 cores used (supplying number available Windows). Note parallel computing significantly faster heavy computing specimens.","code":"# Exhaustive search with parallel computing using 6 cores: calcregions(dolphin_pco, scores = 2, noregions = 10, exhaus = TRUE,             cl = 6, verbose = FALSE)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"IntraSp","dir":"Articles","previous_headings":"","what":"Intrapsecific variability","title":"MorphoRegions","text":"account variability within species group, possible run regionalization analysis multiple specimens single analysis. porpoise dataset contains data 3 different specimens harbor porpoise. total number elements (vertebrae) can differ among specimens, number variables order must . highest number elements used generate vertebral map. porpoise dataset, first specimen 58 post-cervical vertebrae, second 56, third one 59, 17 variables. case differing number elements, homologous elements (vertebrae) must identified number positional information column data. Fig.15. PCO plots three specimens harbor porpoise. data specimen supplied process_measurements function, process run analysis similar running analysis single specimen time. Fig.16. Best fit model (based BIC) PCO 1 2 calculated three harbor porpoise specimens. Fig.17. Vertebral map best fit model (including variance breakpoint position) based three harbor porpoise specimens.","code":"data(\"porpoise\") # Process measurements data porpoise_data <- process_measurements(list(porpoise1, porpoise2, porpoise3), pos = \"Vertebra\")  # Compute PCOs porpoise_pco <- svdPCO(porpoise_data, \"gower\")  # Plot PCOs plot(porpoise_pco, 1:2) plot(porpoise_pco, pco_x = 1, pco_y = 2) # Calculate number of PCOs to use in subsequent analyses PCOs <- PCOselect(porpoise_pco, \"variance\", cutoff = .05)  # Performance for all models across all breakpoint combos regionresults <- calcregions(porpoise_pco, scores = PCOs,                              noregions = 3, verbose = FALSE)  # Adding more models to existing results regionresults <- addregions(regionresults, noregions = 4:5,                             exhaus = FALSE, verbose = FALSE)  # Select best model models <- modelselect(regionresults) supp <- modelsupport(models) supp #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS      AICc deltaAIC model_lik Ak_weight #>        5   18   33   38   53  0.105 -2769.304    0.000         1         1 #>        4   20   40   52    .  0.148 -2656.161  113.142         0         0 #>        3   21   39    .    .  0.293 -2426.584  342.720         0         0 #>        2   37    .    .    .  0.631 -2167.924  601.380         0         0 #>        1    .    .    .    .  2.155 -1749.033 1020.271         0         0 #> Region score: 5  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS       BIC deltaBIC model_lik BIC_weight #>        5   18   33   38   53  0.105 -2709.414    0.000         1          1 #>        4   20   40   52    .  0.148 -2607.254  102.160         0          0 #>        3   21   39    .    .  0.293 -2388.776  320.638         0          0 #>        2   37    .    .    .  0.631 -2141.330  568.084         0          0 #>        1    .    .    .    .  2.155 -1733.764  975.650         0          0 #> Region score: 5  # Calculate variability of optimal breakpoints bpvar <- calcBPvar(regionresults, noregions = 5, pct = .05,                    criterion = \"bic\") bpvar #>         BP 1   BP 2   BP 3   BP 4 #> wMean 18.014 33.124 37.695 52.655 #> wSD    0.651  0.510  0.461  0.493 #> - Computed using top 4.57% of models  # Calculate model performance (R2) of best model modelperf(porpoise_pco, scores = PCOs, modelsupport = supp,           criterion = \"bic\", model = 1) #> Breakpoints: 18, 33, 38, 53  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.984   0.983 #> PCO.2 0.936   0.935 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.974   0.974 # Plot PCOs of best fit model plotsegreg(porpoise_pco, scores = 1:2, modelsupport = supp,             criterion = \"bic\", model = 1) # Plot vertebral map of best fit model plotvertmap(porpoise_pco, name = \"Porpoise\",              type = \"percent\", centraL = \"Lc\",             reg.lim = c(20, 34, 54), dropNA = TRUE,             bpvar = bpvar, sd.col = \"grey20\")"},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"fit-a-specific-model","dir":"Articles","previous_headings":"Other useful options","what":"Fit a specific model","title":"MorphoRegions","text":"Instead fitting possible models given range region number, calcmodel() allows one fit single model user-defined breakpoint positions. Fig.18. Best fit segmented linear regression model PCO 1-3 forcing breakpoint position vertebrae 19, 24, 27, 32, 35, 38, 41.","code":"#Fit a single breakpoints model regionsmodel <- calcmodel(dolphin_pco, scores = 1:3, cont = TRUE,                           bps = c(19, 24, 27, 32, 35, 38, 41)) regionsmodel #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 BP 7 sumRSS RSS.1 RSS.2 RSS.3 #>        8   19   24   27   32   35   38   41  0.034  0.01  0.01 0.013 #>  #> - Support: #>      AICc       BIC  #> -885.1162 -818.3415  #Evaluate performance (R2) on that model modelperf(regionsmodel) #> Breakpoints: 19, 24, 27, 32, 35, 38, 41  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.996   0.995 #> PCO.2 0.983   0.978 #> PCO.3 0.904   0.879 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.990   0.987  #Plot model results: plotsegreg(regionsmodel, scores = 1:3)"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"subsampling-elements","dir":"Articles","previous_headings":"Other useful options","what":"Subsampling elements","title":"MorphoRegions","text":"specimens numerous elements (100), computational time can become high. can useful run regionalization analysis subset elements analyses run comparative framework substantial variation number elements across specimens, also advised subsample elements constant number elements specimens. subsample() allows one subsample elements either providing number elements retain proportion total elements retain. Fig.19. Vertebral map dolphin dataset 33 subsampled vetrebrae (top) 70% total vertebrae subsampled (bottom). Vertebrae dropped grey vertebrae retained blue shade*. default, elements drop selected equidistant along structure (rounded integers). random subsampling elements along structure can applied supplying type = \"random\" subsample().","code":"# Retain 33 vertebrae dolphin_pco_sub.33 <- subsample(dolphin_pco, sample = 33)  # Retain 70% of initial number of vertebrae dolphin_pco_sub.7 <- subsample(dolphin_pco, sample = .7)  plotvertmap(dolphin_pco_sub.33, name = \"Dolphin 33\") plotvertmap(dolphin_pco_sub.7, name = \"Dolphin .7\")"},{"path":"https://aagillet.github.io/MorphoRegions/articles/MorphoRegions.html","id":"simulating-data","dir":"Articles","previous_headings":"Other useful options","what":"Simulating data","title":"MorphoRegions","text":"simregions() allows one simulate datasets satisfy user-defined constraints number elements, regions, PCO axes, minimum number elements per region, variance around linear fits, difference slope successive linear segments. Fig.20. Plot PCO 1 2 simulated dataset 40 vertebrae 5 regions (4 breakpoints). regionalization analysis can run simulated dataset. Fig.21. Plot PCO 1 2 recovered best fit regionalization analysis ran simulated dataset. simulated dataset 5 predefined regions breakpoints vertebrae 16, 20, 29, 34. running regionalization analysis simulated dataset, analysis correctly recovered 5 regions model best fit model using AICc, however 5 regions model second best using BIC. AICc best fit model recovered breakpoints vertebrae 15, 21, 28, 34. recovered position first three breakpoints differ sightly simulated positions, recovered position fourth breakpoint matches simulated data.","code":"# Simulate data  set.seed(2024) sim <- simregions(nvert = 40, nregions = 5, nvar = 4, r2 = .92,                   minvert = 3, cont = TRUE)  # Plot: plot(sim, scores = 1:2) simresults <- calcregions(sim, scores = 1:4, noregions = 6, verbose = FALSE)  simmodels <- modelselect(simresults) simmodels #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5  sumRSS  RSS.1  RSS.2  RSS.3   RSS.4 #>        1    .    .    .    .    . 239.092 26.450 72.184 28.139 112.318 #>        2   29    .    .    .    . 185.535  8.393 39.551 26.728 110.863 #>        3   19   28    .    .    . 148.383  4.114 31.513 22.545  90.211 #>        4   20   28   34    .    . 128.804  4.623 23.291  9.623  91.267 #>        5   15   21   28   34    . 109.794  1.835 11.249  9.891  86.820 #>        6    4   15   21   28   34 105.817  1.724 11.209  7.410  85.474  simsupport <- modelsupport(simmodels) simsupport #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5  sumRSS   AICc deltaAIC model_lik Ak_weight #>        5   15   21   28   34    . 109.794  8.147    0.000     1.000     0.988 #>        6    4   15   21   28   34 105.817 17.655    9.508     0.009     0.009 #>        4   20   28   34    .    . 128.804 19.417   11.270     0.004     0.004 #>        3   19   28    .    .    . 148.383 28.790   20.644     0.000     0.000 #>        2   29    .    .    .    . 185.535 52.184   44.037     0.000     0.000 #>        1    .    .    .    .    . 239.092 81.221   73.075     0.000     0.000 #> Region score: 5  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5  sumRSS     BIC deltaBIC model_lik BIC_weight #>        3   19   28    .    .    . 148.383  79.292    0.000     1.000      0.650 #>        5   15   21   28   34    . 109.794  81.855    2.562     0.278      0.181 #>        4   20   28   34    .    . 128.804  82.028    2.736     0.255      0.166 #>        2   29    .    .    .    . 185.535  89.668   10.376     0.006      0.004 #>        6    4   15   21   28   34 105.817 101.326   22.034     0.000      0.000 #>        1    .    .    .    .    . 239.092 104.869   25.577     0.000      0.000 #> Region score: 3.52  modelperf(sim, modelsupport = simsupport, criterion = \"aic\", model = 1) #> Breakpoints: 15, 21, 28, 34  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.931   0.921 #> PCO.2 0.907   0.894 #> PCO.3 0.883   0.866 #> PCO.4 0.884   0.867 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.888   0.872  #Plot best model fit plotsegreg(sim, scores = 1:2, modelsupport = simsupport,             criterion = \"aic\", model = 1) # Simulated data breakpoints: sim$BPs #> breakpoint1 breakpoint2 breakpoint3 breakpoint4  #>          16          20          29          34  # Recovered best fit breakpoints: simsupport$Model_support[1,2:5] #>       breakpoint1 breakpoint2 breakpoint3 breakpoint4 #> 26746          15          21          28          34  # Variability of recovered best fit breakpoints: calcBPvar(simresults, noregions = 5, pct = 0.1, criterion = \"aic\") #>         BP 1   BP 2   BP 3   BP 4 #> wMean 15.184 20.652 28.138 34.249 #> wSD    1.618  0.788  0.511  0.710 #> - Computed using top 10% of models"},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amandine Gillet. Maintainer, author. Katrina Jones. Author. Noah Greifer. Author. Stephanie Pierce. Author.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gillet , Jones K, Greifer N, Pierce S (????). MorphoRegions: Analysis Regionalization Patterns Serially Homologous Structures. R package version 0.1.0, https://github.com/aagillet/MorphoRegions, https://aagillet.github.io/MorphoRegions/. Gillet , Jones K, Pierce S (2024). “Repatterning mammalian backbone regionalization cetaceans.” bioRxiv. doi:10.1101/2024.03.15.585285.","code":"@Manual{,   title = {MorphoRegions: Analysis of Regionalization Patterns in Serially Homologous Structures},   author = {Amandine Gillet and Katrina Jones and Noah Greifer and Stephanie Pierce},   note = {R package version 0.1.0, https://github.com/aagillet/MorphoRegions},   url = {https://aagillet.github.io/MorphoRegions/}, } @Article{,   title = {Repatterning of mammalian backbone regionalization in cetaceans},   author = {Amandine Gillet and Katrina Jones and Stephanie Pierce},   year = {2024},   journal = {bioRxiv},   doi = {10.1101/2024.03.15.585285}, }"},{"path":"https://aagillet.github.io/MorphoRegions/index.html","id":"morphoregions-analysis-of-regionalization-patterns-in-serially-homologous-structures","dir":"","previous_headings":"","what":"Analysis of Regionalization Patterns in Serially Homologous Structures","title":"Analysis of Regionalization Patterns in Serially Homologous Structures","text":"MorphoRegions R package built computationally identify regions (morphological, functional, etc.) serially homologous structures , limited , vertebrate backbone. Regions modeled segmented linear regressions segment corresponding region region boundaries (breakpoints) corresponding changes along serially homologous structure. optimal number regions breakpoint positions identified using maximum-likelihood methods without priori assumptions. package first presented Gillet et al. (2024) updated version regions R package Jones et al. (2018) improved computational methods expanded fitting plotting options.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/index.html","id":"installing-morphoregions","dir":"","previous_headings":"","what":"Installing MorphoRegions","title":"Analysis of Regionalization Patterns in Serially Homologous Structures","text":"can install released version MorphoRegions CRAN : development version GitHub :","code":"install.packages(\"MorphoRegions\") # install.packages(\"remotes\") remotes::install_github(\"AaGillet/MorphoRegions\")"},{"path":"https://aagillet.github.io/MorphoRegions/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Analysis of Regionalization Patterns in Serially Homologous Structures","text":"following example illustrates basic steps prepare data, fit regionalization models, select best model, plot results. See vignette(\"MorphoRegions\") MorphoRegions website detailed guide package functionalities.","code":"library(MorphoRegions)"},{"path":"https://aagillet.github.io/MorphoRegions/index.html","id":"preparing-the-data","dir":"","previous_headings":"Example","what":"Preparing the data","title":"Analysis of Regionalization Patterns in Serially Homologous Structures","text":"Data provided dataframe row element serially homologous structure (e.g., vertebra). One column contain positional information element (e.g., vertebral number) columns contain variables used calculate regions (e.g., morphological measurements). dolphin dataset contains vertebral measurements dolphin positional information (vertebral number) first column. Prior analysis, data must processed object usable regions using process_measurements(). pos argument used specify name index column containing positional information fillNA argument allows fill missing values dataset (two successive elements). Data ordinated using Principal Coordinates Analysis (PCO) reduce dimensionality allow combination variety data types. number PCOs retain analyses can selected using PCOselect() (see vignette different methods PCO axes selection).","code":"data(\"dolphin\") dolphin_data <- process_measurements(dolphin, pos = 1) class(dolphin_data) #> [1] \"regions_data\" dolphin_pco <- svdPCO(dolphin_data, metric = \"gower\")  # Select PCOs with variance > 0.05 : PCOs <- PCOselect(dolphin_pco, method = \"variance\",                   cutoff = .05) PCOs #> A `regions_pco_select` object #> - PCO scores selected: 1, 2 #> - Method: variance (cutoff: 0.05)"},{"path":"https://aagillet.github.io/MorphoRegions/index.html","id":"fitting-regressions-and-selecting-the-best-model","dir":"","previous_headings":"Example","what":"Fitting regressions and selecting the best model","title":"Analysis of Regionalization Patterns in Serially Homologous Structures","text":"calcregions function allows fitting possible combinations segmented linear regressions 1 region (breakpoint) number regions specified noregions argument. example, 5 regions (4 breakpoints) fitted along backbone, however, limit value possible fit many regions like. example, regions fitted minimum 3 vertebrae per region (minvert = 3) using continuous fit (cont = TRUE) (see vignette(\"MorphoRegions\") MorphoRegions website details fitting options). given number regions, best fit selected minimizing residual sum squares (sumRSS): best overall model (best number regions) select ordering models best fit (top row) worst fit (last row) using either AICc BIC criterion: , criteria, best model 5 regions models breakpoints vertebrae 23, 27, 34, 40. breakpoint value corresponds last vertebra included region, first region made vertebrae 8 23 included second region made vertebrae 24 27. function also returns region score, continuous value reflecting level regionalization accounting uncertainty best number regions (see vignette(\"MorphoRegions\") MorphoRegions website details).","code":"regionresults <- calcregions(dolphin_pco, scores = PCOs, noregions = 5,                              minvert = 3, cont = TRUE,                               exhaus = TRUE, verbose = FALSE) regionresults #> A `regions_results` object #>  - number of PCOs used: 2  #>  - number of regions: 1, 2, 3, 4, 5  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 28810  #> Use `summary()` to examine summaries of the fitting process. models <- modelselect(regionresults) models #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS RSS.1 RSS.2 #>        1    .    .    .    .  1.898 1.456 0.441 #>        2   26    .    .    .  0.413 0.105 0.308 #>        3   23   29    .    .  0.147 0.092 0.055 #>        4   23   30   40    .  0.073 0.034 0.040 #>        5   23   27   34   40  0.046 0.026 0.020 supp <- modelsupport(models) supp #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS     AICc deltaAIC model_lik Ak_weight #>        5   23   27   34   40  0.046 -556.036    0.000         1         1 #>        4   23   30   40    .  0.073 -528.096   27.940         0         0 #>        3   23   29    .    .  0.147 -480.952   75.084         0         0 #>        2   26    .    .    .  0.413 -405.787  150.250         0         0 #>        1    .    .    .    .  1.898 -290.769  265.267         0         0 #> Region score: 5  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 sumRSS      BIC deltaBIC model_lik BIC_weight #>        5   23   27   34   40  0.046 -526.559    0.000         1          1 #>        4   23   30   40    .  0.073 -502.645   23.914         0          0 #>        3   23   29    .    .  0.147 -460.321   66.238         0          0 #>        2   26    .    .    .  0.413 -390.668  135.891         0          0 #>        1    .    .    .    .  1.898 -281.774  244.784         0          0 #> Region score: 5"},{"path":"https://aagillet.github.io/MorphoRegions/index.html","id":"plotting-results","dir":"","previous_headings":"Example","what":"Plotting results","title":"Analysis of Regionalization Patterns in Serially Homologous Structures","text":"Results best model (model) can visualized either scatter plot vertebral map. scatter plot shows PCO score (PCO 1 2) vertebra along backbone (gray dots) segmented linear regressions (cyan line) model plot. Breakpoints showed dotted orange lines.  vertebral map plot, vertebra represented rectangle color-coded according region belongs. Vertebrae included analysis (vertebrae 1 7) represented gray rectangles can removed using dropNA = TRUE.  variability around breakpoint positions can calculated using calcBPvar function displayed vertebral map. weighted average position breakpoint shown black dot weighted variance illustrated horizontal black bar.","code":"plotsegreg(dolphin_pco, scores = 1:2, modelsupport = supp,            criterion = \"bic\", model = 1) plotvertmap(dolphin_pco, name = \"Dolphin\", modelsupport = supp,              criterion = \"bic\", model = 1)  plotvertmap(dolphin_pco, name = \"Dolphin\", modelsupport = supp,              criterion = \"bic\", model = 1, dropNA = TRUE) bpvar <- calcBPvar(regionresults, noregions = 5,                    pct = 0.1, criterion = \"bic\")  plotvertmap(dolphin_pco, name = \"Dolphin\",              dropNA= TRUE, bpvar = bpvar)"},{"path":"https://aagillet.github.io/MorphoRegions/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Analysis of Regionalization Patterns in Serially Homologous Structures","text":"cite MorphoRegions, please use:","code":"citation(\"MorphoRegions\")"},{"path":"https://aagillet.github.io/MorphoRegions/reference/MorphoRegions-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MorphoRegions: Analysis of Regionalization Patterns in Serially Homologous Structures — MorphoRegions-package","title":"MorphoRegions: Analysis of Regionalization Patterns in Serially Homologous Structures — MorphoRegions-package","text":"Computes optimal number regions (subdivisions) position serial structures without priori assumptions visualize results. reducing data dimensionality built-function data ordination, regions fitted segmented linear regressions along serial structure. Every region boundary position increasing number regions iteratively fitted best model (number regions boundary positions) selected information criterion. package expands previous 'regions' package (Jones et al., Science 2018) improved computation fitting plotting options.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/MorphoRegions-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MorphoRegions: Analysis of Regionalization Patterns in Serially Homologous Structures — MorphoRegions-package","text":"Maintainer: Amandine Gillet gillet.aman@gmail.com (ORCID) Authors: Katrina Jones katrina.jones@manchester.ac.uk (ORCID) Noah Greifer ngreifer@iq.harvard.edu (ORCID) Stephanie Pierce spierce@oeb.harvard.edu (ORCID)","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOload.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PCO loadings — PCOload","title":"Calculate PCO loadings — PCOload","text":"PCOload() computes loadings principal coordinates (PCOs) analysis score, correlations features used compute PCOs PCOs.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PCO loadings — PCOload","text":"","code":"PCOload(x, scores)  # S3 method for class 'regions_pco_load' plot(x, ...)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PCO loadings — PCOload","text":"x PCOload(), regions_pco object; output call svdPCO(). plot(), regions_pco_load object. scores numeric vector containing indices desired scores. ... ignored.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PCO loadings — PCOload","text":"PCOload() returns regions_pco_load object, matrix column PCO score requested row variable original dataset; values indicate correlation variable PCO score. plot() returns ggplot object, can manipulated using ggplot2 syntax, displays loadings visually.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOload.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate PCO loadings — PCOload","text":"loadings constructed variable, vert.size, also computed displayed. computed mean features vertebra.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate PCO loadings — PCOload","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Compute PCO loadings loadings <- PCOload(alligator_PCO, scores = 1:4) loadings #> - PCO loadings: #>  #>           PCO.1   PCO.2    PCO.3     PCO.4 #> CL       0.9214  0.2850 -0.17096  0.000379 #> Chpost  -0.2163 -0.5189 -0.74326  0.240596 #> Cwpost   0.4554  0.1168  0.75907  0.175309 #> Chant    0.7288 -0.2063 -0.53556 -0.028160 #> Cwant    0.5402 -0.3457  0.57294  0.238653 #> ArchH   -0.2635 -0.9168  0.05630 -0.065128 #> ArchW   -0.4975 -0.4906  0.36905  0.357137 #> Mid.LW   0.9664 -0.1441  0.15972  0.021917 #> NSL      0.9580 -0.0427  0.09103 -0.127765 #> NSH      0.0773 -0.8326  0.37861  0.212040 #> totH    -0.4753 -0.8241 -0.09257  0.121630 #> totW     0.9532 -0.0821 -0.20079 -0.150651 #> PreZW    0.9248 -0.0133  0.25234  0.171984 #> InterZL  0.9406  0.1956 -0.00413  0.114973 #> TPL      0.7768 -0.0630 -0.50157  0.132715 #> NSA     -0.0383 -0.7876 -0.38165 -0.145363 #> PreZA    0.8968  0.0704  0.15874  0.304670 #> TPDV    -0.7728  0.5232 -0.02010  0.189908 #> TPAP     0.4419 -0.6879  0.14413 -0.418512 #>  #>  - Corr w/ vertebra size: #>  #>           PCO.1  PCO.2   PCO.3  PCO.4 #> vert.size 0.952 -0.207 -0.0441 0.0624  # Plot loadings plot(loadings)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Select PCO scores — PCOselect","title":"Select PCO scores — PCOselect","text":"PCOselect() provides several methods select number principal coordinates (PCOs) analysis scores used subsequent analyses.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select PCO scores — PCOselect","text":"","code":"PCOselect(   pco,   method = \"manual\",   scores = NULL,   cutoff = 0.05,   nreps = 500,   results = NULL,   criterion = \"aic\",   verbose = TRUE )  # S3 method for class 'regions_pco_select' plot(x, ...)  # S3 method for class 'regions_pco_select' summary(object, ...)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select PCO scores — PCOselect","text":"pco regions_pco object; output call svdPCO(). method string; method used select number PCOs. Allowable options include \"manual\", \"boot\", \"variance\", \"max\". Default \"manual\". Abbreviations allowed. See Details. scores method = \"manual\", number PCO scores use. cutoff method = \"variance\", cutoff variance explained PCO score. nreps method = \"boot\", number bootstrap replications use. results method = \"max\", regions_results object, output call calcregions(). criterion method = \"max\", criterion used select number scores. Allowable options include \"aic\" \"bic\". Abbreviations allowed. verbose method = \"boot\", whether display progress bar. Default TRUE. x plot.regions_pco_select(), regions_pco_select object, output call PCOselect() method = \"boot\" \"max\". ... ignored. object regions_pco_select object, output call PCOselect() method = \"max\".","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select PCO scores — PCOselect","text":"PCOselect(), regions_pco_select object, numeric vector containing indices chosen PCOs, attributes containing information PCO scores chosen specified method. method = \"boot\", bootstrap results stored \"boot\" attribute. method = \"max\", regions_results object passed regions information quality fit number PCOs stored \"pcomax\" attribute. plot() methods return ggplot object can manipulated using ggplot2 syntax. summary() method returns data.frame results.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select PCO scores — PCOselect","text":"method provides alternate way select number scores. described .","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"method-manual-","dir":"Reference","previous_headings":"","what":"method = \"manual\":","title":"Select PCO scores — PCOselect","text":"simply returns number supplied scores running checks ensure valid.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"method-boot-","dir":"Reference","previous_headings":"","what":"method = \"boot\"","title":"Select PCO scores — PCOselect","text":"Bootstrapping works comparing eigenvalue distributions PCOs randomized data order extract PCO axes significant signal, defined eigenvalues greater randomized data. returned PCO cutoff largest PCO axis whose eigenvalues fall mean eigenvalue axis randomized data. Data randomly sampled row. Bootstrapping sensitive unequal variances columns, scale = TRUE set call svdPCO(), default; data scaled way prior bootstrapping. plot() method displays eigenvalues true PCOs boxplots summarizing distribution bootstrapped eigenvalues PCO.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"method-variance-","dir":"Reference","previous_headings":"","what":"method = \"variance\"","title":"Select PCO scores — PCOselect","text":"method works computing ratio eigenvalue sum eigenvalues (.e., compute proportion variance explained PCO score) select number scores ratios greater cutoff value supplied cutoff.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"method-max-","dir":"Reference","previous_headings":"","what":"method = \"max\"","title":"Select PCO scores — PCOselect","text":"method works selecting smallest number PCOs gives region score within .001 maximum possible region score segmented models fit object supplied results. criterion maximized (AIC BIC) determined value supplied criterion. summary() method displays region score (estimated number regions) PCO (RSind) PCOs cumulatively (RScum) selected using AICc BIC well cumulative proportion variance explained PCOs. plot() method displays information graphically, left y-axis displaying region score PCOs individually (pale blue triangles) cumulatively (orange circles) using two criteria, right y-axis displaying cumulative percentage variance explained PCOs.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/PCOselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select PCO scores — PCOselect","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Select which PCOs to use ## Manually (first 4 PCOs) (PCOs <- PCOselect(alligator_PCO, \"manual\", scores = 4)) #> A `regions_pco_select` object #> - PCO scores selected: 1, 2, 3, 4 #> - Method: manual  ## Using variance cutoff: PCOs that explain 5% or more ## of total PCO variance (PCOs <- PCOselect(alligator_PCO, \"variance\", cutoff = .05)) #> A `regions_pco_select` object #> - PCO scores selected: 1, 2, 3 #> - Method: variance (cutoff: 0.05)  ## Using bootstrapping with 50 reps (more reps should ## be used in practice; default is fine) (PCOs <- PCOselect(alligator_PCO, \"boot\", nreps = 50)) #> Bootstrapping... #> A `regions_pco_select` object #> - PCO scores selected: 1, 2 #> - Method: boot (50 replications)  plot(PCOs) #plot true eigenvalues against bootstrapped   ## Using PCOs that optimize region score: regionresults <- calcregions(alligator_PCO, scores = 1:21, noregions = 7,                              minvert = 3, cont = TRUE, exhaus = TRUE,                              verbose = FALSE)  (PCOs <- PCOselect(alligator_PCO, \"max\",                    results = regionresults,                    criterion = \"bic\")) #> A `regions_pco_select` object #> - PCO scores selected: 1, 2, 3, 4 #> - Method: max (criterion: BIC)  plot(PCOs)   summary(PCOs) #>  PCO RSind.AICc RScum.AICc RSind.BIC RScum.BIC CumulVar #>    1      3.636      3.636     4.539     4.539    0.528 #>    2      3.277      4.511     4.018     4.825    0.756 #>    3      4.963      5.000     5.044     5.001    0.864 #>    4      2.960      5.411     3.822     5.613    0.892 #>    5      1.112      5.228     1.124     5.195    0.912 #>    6      3.963      5.652     4.068     5.348    0.930 #>    7      1.212      5.481     1.217     5.081    0.943 #>    8      1.164      5.409     1.168     5.020    0.952 #>    9      1.084      5.132     1.083     5.000    0.960 #>   10      1.108      5.031     1.097     4.987    0.968 #>   11      1.063      5.009     1.054     4.921    0.974 #>   12      1.091      5.003     1.078     4.530    0.980 #>   13      1.073      5.001     1.072     3.545    0.985 #>   14      1.065      5.000     1.056     3.136    0.990 #>   15      1.062      5.000     1.052     3.031    0.993 #>   16      1.072      5.000     1.062     3.012    0.995 #>   17      1.059      5.000     1.050     3.004    0.997 #>   18      1.064      5.000     1.055     3.001    0.998 #>   19      1.089      5.000     1.085     3.001    0.999 #>   20      1.075      5.000     1.069     3.000    1.000 #>   21      1.081      5.000     1.069     3.000    1.000"},{"path":"https://aagillet.github.io/MorphoRegions/reference/alligator.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurements from the vertebral column of an alligator — alligator","title":"Measurements from the vertebral column of an alligator — alligator","text":"Linear angular measurements Alligator mississipiensis MCZ 81457","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/alligator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurements from the vertebral column of an alligator — alligator","text":"","code":"alligator"},{"path":"https://aagillet.github.io/MorphoRegions/reference/alligator.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Measurements from the vertebral column of an alligator — alligator","text":"matrix 22 vertebrae 19 measurements. Column 1, vertebra, positional information.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcBPvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variability of breakpoints — calcBPvar","title":"Calculate variability of breakpoints — calcBPvar","text":"calcBPvar() computes estimate variability breakpoints given number regions. involves computing weighted mean standard deviation breakpoint using Akaike weights.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcBPvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variability of breakpoints — calcBPvar","text":"","code":"calcBPvar(regions_results, noregions, pct = 0.05, criterion = \"aic\")"},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcBPvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variability of breakpoints — calcBPvar","text":"regions_results regions_results object; output call calcregions() addregions(). noregions number regions weighted mean standard deviation computed. pct proportion best model keep original total number possible models criterion string; criterion used compute weights. Allowable options include \"aic\" \"bic\". Abbreviations allowed.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcBPvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variability of breakpoints — calcBPvar","text":"regions_BPvar object, two components: WeightedBP matrix containing weighted mean standard deviation breakpoint BestModels data frame containing models used compute weighted breakpoint statistics weights one given.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcBPvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate variability of breakpoints — calcBPvar","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Fit segmented regression models for 1 to 7 regions # using PCOs 1 to 4 and a continuous model with a # exhaustive search regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 7,                              minvert = 3,                              cont = TRUE,                              exhaus = TRUE,                              verbose = FALSE)  # Compute Akaike-weighted location and SD of optimal # breakpoints using top 10% of models with 4 regions calcBPvar(regionresults, noregions = 4,           pct = .1, criterion = \"aic\") #>        BP 1   BP 2   BP 3 #> wMean 8.904 12.808 19.506 #> wSD   0.441  0.596  0.976 #> - Computed using top 10.14% of models"},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate results of a single segmented regression model — calcmodel","title":"Calculate results of a single segmented regression model — calcmodel","text":"calcmodel() fits multivariate segmented regression model using supplied PCOs breakpoints.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate results of a single segmented regression model — calcmodel","text":"","code":"calcmodel(x, scores, bps, cont = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate results of a single segmented regression model — calcmodel","text":"x regions_pco object; output call svdPCO(). scores numeric; indices PCO scores use outcomes fitting model (e.g., 1:4 use first four scores). bps numeric; indices breakpoints use fitting model. request model breakpoints, set NA. cont logical; whether fit model continuous (TRUE) discontinuous (FALSE) breakpoints. Default TRUE. Ignored bps NA.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate results of a single segmented regression model — calcmodel","text":"regions_results_single object, contains results model (breakpoints RSS PCO overall) model support statistics.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate results of a single segmented regression model — calcmodel","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Calculate a single segmented regression model # using first 2 PCOs and a discontinuous model regionsmodel <- calcmodel(alligator_PCO,                           scores = 1:3,                           bps = c(8, 16, 21),                           cont = FALSE)  regionsmodel #>  Regions BP 1 BP 2 BP 3 sumRSS RSS.1 RSS.2 RSS.3 #>        4    8   16   21   0.07 0.029 0.011  0.03 #>  #> - Support: #>      AICc       BIC  #> -358.2623 -338.9311   #Evaluate performance (R2) on that model modelperf(regionsmodel) #> Breakpoints: 8, 16, 21  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.962   0.944 #> PCO.2 0.969   0.953 #> PCO.3 0.810   0.716 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.945   0.918   #Plot model results: plotsegreg(regionsmodel, scores = 1:3)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcregions.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit segmented regression models for all combinations of breakpoints — calcregions","title":"Fit segmented regression models for all combinations of breakpoints — calcregions","text":"calcregions() enumerates possible combinations breakpoints fit multivariate segmented regression models. addregions() adds models additional numbers regions resulting output object. ncombos() computes upper bound number breakpoint combinations tested.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcregions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit segmented regression models for all combinations of breakpoints — calcregions","text":"","code":"calcregions(   pco,   scores,   noregions,   minvert = 3,   cont = TRUE,   exhaus = TRUE,   includebp = NULL,   omitbp = NULL,   ncombos_file_trigger = 1e+07,   temp_file_dir = tempdir(TRUE),   cl = NULL,   verbose = TRUE )  addregions(   regions_results,   noregions,   exhaus = TRUE,   ncombos_file_trigger = 1e+07,   temp_file_dir = tempdir(TRUE),   cl = NULL,   verbose = TRUE )  # S3 method for class 'regions_results' summary(object, ...)  ncombos(pco, noregions, minvert = 3, includebp = NULL, omitbp = NULL)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcregions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit segmented regression models for all combinations of breakpoints — calcregions","text":"pco regions_pco object; output call svdPCO(). scores numeric; indices PCO scores use outcomes fitting models (e.g., 1:4 use first four scores). Can also output call PCOselect(). noregions numeric; calcregions(), maximum number regions models fit (e.g, 4 request models 1 4 regions); addregions(), vector containing numbers regions add (e.g., 5:6 request models 5 6 regions); ncombos(), vector containing numbers regions check. minvert numeric; minimum number vertebrae allowed region. Default 3. cont logical; whether fit models continuous (TRUE) discontinuous (FALSE) breakpoints. Default TRUE. exhaus logical; whether fit possible models (TRUE) use heuristics reduce number models fit (FALSE). Default TRUE. See Details. Setting FALSE can reduce size resulting object. includebp optional vector vertebrae must included tested set breakpoints, e.g., known two regions divided vertebra. includebp obey minvert rules, warning thrown . omitbp optional vector vertebrae omitted list possible breakpoints, e.g., known two adjacent vertebrae belong region. ncombos_file_trigger numeric; number eligible combinations breakpoints exceeds number, problem split smaller problems, results stored temporary file directory supplied temp_file_dir re-read memory. primary purpose preserve memory exhaus = FALSE delegating storage results disk instead RAM. temp_file_dir string; directory temporary files saved (deleted) number breakpoint combinations exceeds ncombos_file_trigger. Default directory produced tempdir(), much safer provide directory, must already exist machine. See Details. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations, \"future\" use future backend. NULL (default) refers sequential evaluation (parallelization). See pbapply::pbapply() details. verbose logical; whether print information fitting process, including progress bar. Default TRUE. regions_results, object regions_results object; output call calcregions() addregions(). ... ignored.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcregions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit segmented regression models for all combinations of breakpoints — calcregions","text":"regions_results object following components: results - results fitting process combination breakpoints stats - statistics summarizing fitting process. Use summary() view information clean format. ncombos() returns numeric vector number breakpoint combinations number regions (stored names).","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcregions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit segmented regression models for all combinations of breakpoints — calcregions","text":"calcregions() enumerates possible combinations breakpoints satisfy constraint imposed minvert (.e., breakpoints need least minvert vertebrae apart) fits segmented regression models implied combination. multivariate regression models PCO scores specified scores outcomes. cont = TRUE, regression models continuous; .e., regression lines region connect breakpoints. Otherwise, models discontinuous region intercept slope. models fit using .lm.fit(), efficiently implements ordinary least squares regression. exhaus = FALSE, heuristics used reduce number models fit, can useful keeping size resulting object avoiding fitting models corresponding breakpoint combinations yield poor fit data. breakpoint combinations correspond breakpoints best fitting model smaller number regions +/- 3 vertebrae used, models RSS smaller half standard deviation smallest RSS kept. addregions() used existing regions_results object add models regions. Internally, works just calcregions(). ncomobs() computes upper bound number possible breakpoint combinations. exhaus = FALSE includebp specified, actual number combinations smaller produced ncombos(). number possible combinations breakpoints given number regions (computed ncombos()) larger ncombos_file_trigger, problem split smaller problems, results stored temporary files deleted function completes. temporary files stored directory supplied temp_file_dir. default, temporary directory produced tempdir(). However, directory can deleted R time without warning, cause function crash, good idea supply directory preserved. can use ncombos() check see number breakpoint combinations exceeds ncombos_file_trigger.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/calcregions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit segmented regression models for all combinations of breakpoints — calcregions","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Fit segmented regression models for 1 to 5 regions # using PCOs 1 to 4 and a continuous model with a # non-exhaustive search regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 5,                              minvert = 3,                              cont = TRUE,                              exhaus = FALSE,                              verbose = FALSE)  regionresults #> A `regions_results` object #>  - number of PCOs used: 4  #>  - number of regions: 1, 2, 3, 4, 5  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 85  #> Use `summary()` to examine summaries of the fitting process.  # View model fitting summary summary(regionresults) #>  Regions Possible Tested Saved Comp. method Saving method #>        1        1      1     1   Exhaustive           All #>        2       17     17    17   Exhaustive           All #>        3      105    105    17   Non-exhaus          SD/2 #>        4      286    237    24   Non-exhaus          SD/2 #>        5      330    323    26   Non-exhaus          SD/2  # Add additional regions to existing results, # exhaustive search this time regionresults <- addregions(regionresults,                             noregions = 6:7,                             exhaus = TRUE,                             verbose = FALSE)  regionresults #> A `regions_results` object #>  - number of PCOs used: 4  #>  - number of regions: 1, 2, 3, 4, 5, 6, 7  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 218  #> Use `summary()` to examine summaries of the fitting process.  summary(regionresults) #>  Regions Possible Tested Saved Comp. method Saving method #>        1        1      1     1   Exhaustive           All #>        2       17     17    17   Exhaustive           All #>        3      105    105    17   Non-exhaus          SD/2 #>        4      286    237    24   Non-exhaus          SD/2 #>        5      330    323    26   Non-exhaus          SD/2 #>        6      126    126   126   Exhaustive           All #>        7        7      7     7   Exhaustive           All  # Fit segmented regression models for 1 to 5 regions # using PCOs 1 to 4 and a discontinuous model with a # exhaustive search, excluding breakpoints at vertebrae # 10 and 15 regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 5,                              minvert = 3,                              cont = FALSE,                              omitbp = c(10, 15),                              verbose = FALSE)  regionresults #> A `regions_results` object #>  - number of PCOs used: 4  #>  - number of regions: 1, 2, 3, 4, 5  #>  - model type: discontinuous  #>  - min vertebrae per region: 3  #>  - omitted breakpoints: 10, 15  #>  - total models saved: 385  #> Use `summary()` to examine summaries of the fitting process.  summary(regionresults) #>  Regions Possible Tested Saved Comp. method Saving method #>        1        1      1     1   Exhaustive           All #>        2       15     15    15   Exhaustive           All #>        3       78     78    78   Exhaustive           All #>        4      165    165   165   Exhaustive           All #>        5      126    126   126   Exhaustive           All  # Compute the number of breakpoint combinations for given # specification using `ncombos()`; if any number exceeds # the value supplied to `ncombos_file_trigger`, results # will temporary be stored in files before being read in and # deleted. ncombos(alligator_PCO,         noregions = 1:8,         minvert = 3) #>   1   2   3   4   5   6   7   8  #>   1  17 105 286 330 126   7   0"},{"path":"https://aagillet.github.io/MorphoRegions/reference/dolphin.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurements from the vertebral column of a dolphin — dolphin","title":"Measurements from the vertebral column of a dolphin — dolphin","text":"Linear angular measurements Platanista gangetica SMNS 45653","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/dolphin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurements from the vertebral column of a dolphin — dolphin","text":"","code":"dolphin"},{"path":"https://aagillet.github.io/MorphoRegions/reference/dolphin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Measurements from the vertebral column of a dolphin — dolphin","text":"matrix 40 vertebrae 16 measurements. Column 1, vertebra, positional information.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelperf.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess model performance — modelperf","title":"Assess model performance — modelperf","text":"modelperf() computes model performance statistics form \\(R^2\\) measures given combination breakpoints.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelperf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess model performance — modelperf","text":"","code":"modelperf(x, ...)  # S3 method for class 'regions_pco' modelperf(   x,   scores,   modelsupport = NULL,   criterion = \"aic\",   model = 1,   bps = NULL,   cont = TRUE,   ... )  # S3 method for class 'regions_sim' modelperf(   x,   scores = NULL,   modelsupport = NULL,   criterion = \"aic\",   model = 1,   bps = NULL,   cont = TRUE,   ... )  # S3 method for class 'regions_results_single' modelperf(x, scores = NULL, ...)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelperf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess model performance — modelperf","text":"x regions_pco object, output call svdPCO(), regions_results_single object, output call calcmodel(). ... ignored. scores numeric; indices PCO scores fit statistics computed. modelsupport regions_modelsupport object, output call modelsupport(). x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. criterion string; criterion use select best model breakpoints displayed modelsupport specified. Ignored otherwise. Allowable options include \"aic\" use AICc \"bic\" use BIC. Abbreviations allowed. Default \"aic\". x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. model numeric; model among best determined criterion fit statistics computed. 1 best model, 2 second best, etc. Default 1. x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. bps numeric; vector breakpoints model fit computed. x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. cont logical; whether fit model continuous (TRUE) discontinuous (FALSE) breakpoints supplied bps. Default TRUE. x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelperf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess model performance — modelperf","text":"regions_perf object containing breakpoints specified model, univariate \\(R^2\\) adjusted \\(R^2\\) statistics PCO score, multivariate \\(R^2\\) adjusted \\(R^2\\) statistics.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelperf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assess model performance — modelperf","text":"modelperf() operates single model identified breakpoints whether model continuous . x regions_pco object, model selected either best model supplied modelsupport object (\"best\" determined arguments criterion model) specified user using arguments bps cont. x regions_results_single object, breakpoints model form determined based supplied object.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelperf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess model performance — modelperf","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Evaluate model performance (R2) given supplied # breakpoints for a continuous model modelperf(alligator_PCO, scores = 1:3,           bps = c(7, 15, 20), cont = TRUE) #> Breakpoints: 7, 15, 20  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.963   0.954 #> PCO.2 0.888   0.862 #> PCO.3 0.636   0.550 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.902   0.879   plotsegreg(alligator_PCO, scores = 1:3,            bps = c(7, 15, 20), cont = TRUE)  ## See also `?calcmodel` for use with a single model  # Fit segmented regression models for 1 to 7 regions # using PCOs 1 to 4 and a continuous model with a # non-exhaustive search regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 7,                              minvert = 3,                              cont = TRUE,                              exhaus = FALSE,                              verbose = FALSE)  regionresults #> A `regions_results` object #>  - number of PCOs used: 4  #>  - number of regions: 1, 2, 3, 4, 5, 6, 7  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 112  #> Use `summary()` to examine summaries of the fitting process.  # For each number of regions, identify best # model based on minimizing RSS bestresults <- modelselect(regionresults)  # Evaluate support for each model and rank supp <- modelsupport(bestresults)  # Evaluate model performance (R2) for best model # as chosen by BIC modelperf(alligator_PCO, scores = 1:4,           modelsupport = supp,           criterion = \"bic\", model = 1) #> Breakpoints: 6, 9, 12, 15, 19  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.992   0.988 #> PCO.2 0.975   0.964 #> PCO.3 0.892   0.849 #> PCO.4 0.772   0.681 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.968   0.956   # Plot that model for the first PCO score plotsegreg(alligator_PCO, scores = 1:4,            modelsupport = supp,            criterion = \"bic\", model = 1)   ## See `?simregions` for use with simulated data"},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the best models — modelselect","title":"Select the best models — modelselect","text":"modelselect() narrows search best model identifying best model number regions determined residual sums squares (RSS).","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the best models — modelselect","text":"","code":"modelselect(results, scores = NULL)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the best models — modelselect","text":"results regions_results object; output call calcregions() addregions(). scores numeric; vector corresponding indices PCOs \\(R^2\\) used determine best model number regions. NULL, default, PCOs used included fitting used.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the best models — modelselect","text":"regions_modelselect object, contains information best models number regions extracted results.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select the best models — modelselect","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Fit segmented regression models for 1 to 7 regions # using PCOs 1 to 4 and a continuous model with a # non-exhaustive search regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 7,                              minvert = 3,                              cont = TRUE,                              exhaus = FALSE,                              verbose = FALSE)  regionresults #> A `regions_results` object #>  - number of PCOs used: 4  #>  - number of regions: 1, 2, 3, 4, 5, 6, 7  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 112  #> Use `summary()` to examine summaries of the fitting process.  # For each number of regions, identify best # model based on minimizing RSS bestresults <- modelselect(regionresults) bestresults #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS RSS.1 RSS.2 RSS.3 RSS.4 #>        1    .    .    .    .    .    .  0.725 0.221 0.327 0.135 0.041 #>        2   12    .    .    .    .    .  0.356 0.077 0.127 0.112 0.040 #>        3    9   14    .    .    .    .  0.154 0.019 0.039 0.063 0.033 #>        4    9   13   19    .    .    .  0.098 0.008 0.010 0.045 0.035 #>        5    6    9   13   19    .    .  0.054 0.008 0.010 0.017 0.020 #>        6    6    9   12   15   19    .  0.042 0.007 0.009 0.017 0.009 #>        7    6    9   12   15   18   21  0.042 0.006 0.011 0.014 0.010  # Evaluate support for each model and rank models supp <- modelsupport(bestresults) supp #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS     AICc deltaAIC model_lik #>        5    6    9   13   19    .    .  0.054 -566.603    0.000     1.000 #>        6    6    9   12   15   19    .  0.042 -565.883    0.720     0.698 #>        7    6    9   12   15   18   21  0.042 -537.487   29.116     0.000 #>        4    9   13   19    .    .    .  0.098 -534.934   31.668     0.000 #>        3    9   14    .    .    .    .  0.154 -512.839   53.764     0.000 #>        2   12    .    .    .    .    .  0.356 -454.040  112.563     0.000 #>        1    .    .    .    .    .    .  0.725 -404.530  162.073     0.000 #>  Ak_weight #>      0.589 #>      0.411 #>      0.000 #>      0.000 #>      0.000 #>      0.000 #>      0.000 #> Region score: 5.41  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS      BIC deltaBIC model_lik #>        6    6    9   12   15   19    .  0.042 -525.687    0.000      1.00 #>        5    6    9   13   19    .    .  0.054 -524.763    0.924      0.63 #>        7    6    9   12   15   18   21  0.042 -503.838   21.849      0.00 #>        4    9   13   19    .    .    .  0.098 -495.206   30.481      0.00 #>        3    9   14    .    .    .    .  0.154 -478.160   47.527      0.00 #>        2   12    .    .    .    .    .  0.356 -426.753   98.933      0.00 #>        1    .    .    .    .    .    .  0.725 -386.534  139.152      0.00 #>  BIC_weight #>       0.613 #>       0.387 #>       0.000 #>       0.000 #>       0.000 #>       0.000 #>       0.000 #> Region score: 5.61   # 5 regions best based on AICc; 6 regions based on BIC"},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelsupport.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate model support — modelsupport","title":"Evaluate model support — modelsupport","text":"modelsupport() computes measures relative support best models identified modelselect() facilitate selecting optimal number position regions. measures form information criteria (AICc BIC).","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelsupport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate model support — modelsupport","text":"","code":"modelsupport(models)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelsupport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate model support — modelsupport","text":"models regions_modelselect object; output call modelselect().","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelsupport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate model support — modelsupport","text":"regions_modelsupport object, contains best model number regions determined AICc BIC. computed statistics AICc/BIC–value information criterion (IC) model, deltaAIC/deltaBIC–difference IC corresponding model model lowest IC value, model_lik–likelihood ratio model model lowest IC value, Ak_weight/BIC_weight–Akaike weights model used compute region score. region score weighted average numbers regions, weighted Akaike weights represent variability around optimal number regions.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/modelsupport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate model support — modelsupport","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Fit segmented regression models for 1 to 7 regions # using PCOs 1 to 4 and a continuous model with a # non-exhaustive search regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 7,                              minvert = 3,                              cont = TRUE,                              exhaus = FALSE,                              verbose = FALSE)  regionresults #> A `regions_results` object #>  - number of PCOs used: 4  #>  - number of regions: 1, 2, 3, 4, 5, 6, 7  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 112  #> Use `summary()` to examine summaries of the fitting process.  # For each number of regions, identify best # model based on minimizing RSS bestresults <- modelselect(regionresults) bestresults #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS RSS.1 RSS.2 RSS.3 RSS.4 #>        1    .    .    .    .    .    .  0.725 0.221 0.327 0.135 0.041 #>        2   12    .    .    .    .    .  0.356 0.077 0.127 0.112 0.040 #>        3    9   14    .    .    .    .  0.154 0.019 0.039 0.063 0.033 #>        4    9   13   19    .    .    .  0.098 0.008 0.010 0.045 0.035 #>        5    6    9   13   19    .    .  0.054 0.008 0.010 0.017 0.020 #>        6    6    9   12   15   19    .  0.042 0.007 0.009 0.017 0.009 #>        7    6    9   12   15   18   21  0.042 0.006 0.011 0.014 0.010  # Evaluate support for each model and rank models supp <- modelsupport(bestresults) supp #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS     AICc deltaAIC model_lik #>        5    6    9   13   19    .    .  0.054 -566.603    0.000     1.000 #>        6    6    9   12   15   19    .  0.042 -565.883    0.720     0.698 #>        7    6    9   12   15   18   21  0.042 -537.487   29.116     0.000 #>        4    9   13   19    .    .    .  0.098 -534.934   31.668     0.000 #>        3    9   14    .    .    .    .  0.154 -512.839   53.764     0.000 #>        2   12    .    .    .    .    .  0.356 -454.040  112.563     0.000 #>        1    .    .    .    .    .    .  0.725 -404.530  162.073     0.000 #>  Ak_weight #>      0.589 #>      0.411 #>      0.000 #>      0.000 #>      0.000 #>      0.000 #>      0.000 #> Region score: 5.41  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5 BP 6 sumRSS      BIC deltaBIC model_lik #>        6    6    9   12   15   19    .  0.042 -525.687    0.000      1.00 #>        5    6    9   13   19    .    .  0.054 -524.763    0.924      0.63 #>        7    6    9   12   15   18   21  0.042 -503.838   21.849      0.00 #>        4    9   13   19    .    .    .  0.098 -495.206   30.481      0.00 #>        3    9   14    .    .    .    .  0.154 -478.160   47.527      0.00 #>        2   12    .    .    .    .    .  0.356 -426.753   98.933      0.00 #>        1    .    .    .    .    .    .  0.725 -386.534  139.152      0.00 #>  BIC_weight #>       0.613 #>       0.387 #>       0.000 #>       0.000 #>       0.000 #>       0.000 #>       0.000 #> Region score: 5.61   # 5 regions best based on AICc; 6 regions based on BIC"},{"path":"https://aagillet.github.io/MorphoRegions/reference/musm.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurements from the vertebral column of a mouse — musm","title":"Measurements from the vertebral column of a mouse — musm","text":"Linear angular measurements Mus musculus MCZ 59560","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/musm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurements from the vertebral column of a mouse — musm","text":"","code":"musm"},{"path":"https://aagillet.github.io/MorphoRegions/reference/musm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Measurements from the vertebral column of a mouse — musm","text":"matrix 23 vertebrae 19 measurements. Column 1, vertebra, positional information.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plot.regions_pco.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PCO axes — plot.regions_pco","title":"Plot PCO axes — plot.regions_pco","text":"plot() visualizes relationship PCO axis vertebra pairs PCO axes.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plot.regions_pco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PCO axes — plot.regions_pco","text":"","code":"# S3 method for class 'regions_pco' plot(x, pco_y = 1, pco_x = NULL, ...)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/plot.regions_pco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PCO axes — plot.regions_pco","text":"x regions_pco object; output call svdPCO(). pco_y, pco_x number; PCO score indices y- x-axes, respectively. pco_x can NULL. ... arguments passed ggplot2::geom_text() pco_x NULL. scores supplied argument, replace pco_y unspecified.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plot.regions_pco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot PCO axes — plot.regions_pco","text":"ggplot object.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plot.regions_pco.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot PCO axes — plot.regions_pco","text":"pco_x NULL (default), plot() display scatterplot PCO axis identified pco_y vertebra position using ggplot2::geom_point(). plot similar generated plotsegreg(). Otherwise, plot() uses ggplot2::geom_text() identify vertebrae positions space corresponding requested PCOs.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/plot.regions_pco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot PCO axes — plot.regions_pco","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data,                         metric = \"gower\")  alligator_PCO #> - Scores: #>    PCO.1   PCO.2    PCO.3    PCO.4    PCO.5    PCO.6    PCO.7   PCO.8    PCO.9 #> 1 -0.334  0.2386  0.03426 -0.10271 -0.04904 -0.04760 -0.03210 -0.0341 -0.00170 #> 2 -0.284  0.1480 -0.02979 -0.01372  0.06610 -0.03238  0.05522  0.0245  0.01972 #> 3 -0.251  0.1106 -0.07088  0.05289  0.04260 -0.02385 -0.03003  0.0160 -0.03045 #> 4 -0.269  0.0116 -0.09275  0.07987 -0.00401  0.00907  0.00464  0.0231 -0.00295 #> 5 -0.243 -0.0695 -0.04831  0.01709 -0.05224  0.06285 -0.02271  0.0222  0.00941 #> 6 -0.268 -0.1863  0.00344 -0.00869 -0.00536  0.06317 -0.02513 -0.0205  0.02758 #>      PCO.10   PCO.11    PCO.12   PCO.13    PCO.14   PCO.15   PCO.16    PCO.17 #> 1  0.018670  0.00486  0.000221  0.00457  0.000393 -0.00198 -0.00860  0.000428 #> 2 -0.036114  0.00829 -0.027648 -0.01465  0.004165 -0.00981  0.00182 -0.003757 #> 3  0.000191 -0.02548  0.040047  0.00938  0.009774  0.02548  0.01119  0.007634 #> 4  0.025317  0.01864  0.003402  0.01498 -0.021639 -0.03377 -0.00674 -0.005831 #> 5  0.020205 -0.01407 -0.032932 -0.04248  0.003092  0.01802 -0.00649  0.005655 #> 6 -0.045238  0.02653  0.020049  0.02394  0.007392  0.00588  0.00227 -0.001655 #>      PCO.18   PCO.19    PCO.20    PCO.21 #> 1  0.001471  0.00337 -0.001435  0.000816 #> 2 -0.008612 -0.00597  0.001839  0.002614 #> 3 -0.000183 -0.00604  0.002491 -0.002083 #> 4  0.012116  0.01142 -0.002113 -0.001988 #> 5 -0.001655 -0.00516  0.002234 -0.001151 #> 6 -0.011215  0.00492 -0.000682  0.002172 #> (First 6 of 22 rows displayed.) #>  #> - Eigenvalues: #>  [1] 7.81e-01 3.39e-01 1.59e-01 4.17e-02 2.94e-02 2.73e-02 1.86e-02 1.32e-02 #>  [9] 1.29e-02 1.17e-02 8.97e-03 8.39e-03 7.81e-03 6.20e-03 5.88e-03 2.85e-03 #> [17] 2.12e-03 2.00e-03 1.38e-03 9.43e-04 3.79e-04 8.08e-17  # Plot PCOs against vertebra index plot(alligator_PCO, pco_y = 1:2)   # Plot PCOs against each other plot(alligator_PCO, pco_y = 1, pco_x = 2)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotsegreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a segmented regression model — plotsegreg","title":"Plot a segmented regression model — plotsegreg","text":"plotsegreg() plots fitted lines resulting segmented regression model.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotsegreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a segmented regression model — plotsegreg","text":"","code":"plotsegreg(x, scores, ...)  # S3 method for class 'regions_pco' plotsegreg(   x,   scores,   modelsupport = NULL,   criterion = \"aic\",   model = 1,   bps = NULL,   cont = TRUE,   ... )  # S3 method for class 'regions_sim' plotsegreg(   x,   scores,   modelsupport = NULL,   criterion = \"aic\",   model = 1,   bps = NULL,   cont = TRUE,   ... )  # S3 method for class 'regions_results_single' plotsegreg(x, scores, ...)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotsegreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a segmented regression model — plotsegreg","text":"x regions_pco object, output call svdPCO(), regions_results_single object, output call calcmodel(). scores numeric; indices PCO scores fitted lines plotted. ... ignored. modelsupport regions_modelsupport object, output call modelsupport(). x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. criterion string; criterion use select best model breakpoints displayed modelsupport specified. Ignored otherwise. Allowable options include \"aic\" use AICc \"bic\" use BIC. Abbreviations allowed. Default \"aic\". x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. model numeric; model among best determined criterion fitted lines plotted. 1 best model, 2 second best, etc. Default 1. x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. bps numeric; vector breakpoints model fitted lines plotted. x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details. cont logical; whether fit model continuous (TRUE) discontinuous (FALSE) breakpoints supplied bps. Default TRUE. x regions_pco object, either modelsupport, criterion, model must supplied bps cont must supplied. See Details.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotsegreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a segmented regression model — plotsegreg","text":"ggplot object can manipulated using ggplot2 syntax.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotsegreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a segmented regression model — plotsegreg","text":"plotsegreg() operates single model identified breakpoints whether model continuous . x regions_pco object, model selected either best model supplied modelsupport object (\"best\" determined arguments criterion model) specified user using arguments bps cont. x regions_results_single object, breakpoints model form determined based supplied object. plot() alias plotsegreg() regions_results_single objects.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotsegreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a segmented regression model — plotsegreg","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Evaluate model performance (R2) given supplied # breakpoints for a continuous model modelperf(alligator_PCO, scores = 1:3,           bps = c(7, 15, 20), cont = TRUE) #> Breakpoints: 7, 15, 20  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.963   0.954 #> PCO.2 0.888   0.862 #> PCO.3 0.636   0.550 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.902   0.879   plotsegreg(alligator_PCO, scores = 1:3,            bps = c(7, 15, 20), cont = TRUE)  ## See also `?calcmodel` for use with a single model  # Fit segmented regression models for 1 to 7 regions # using PCOs 1 to 4 and a continuous model with a # non-exhaustive search regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 7,                              minvert = 3,                              cont = TRUE,                              exhaus = FALSE,                              verbose = FALSE)  regionresults #> A `regions_results` object #>  - number of PCOs used: 4  #>  - number of regions: 1, 2, 3, 4, 5, 6, 7  #>  - model type: continuous  #>  - min vertebrae per region: 3  #>  - total models saved: 112  #> Use `summary()` to examine summaries of the fitting process.  # For each number of regions, identify best # model based on minimizing RSS bestresults <- modelselect(regionresults)  # Evaluate support for each model and rank supp <- modelsupport(bestresults)  # Evaluate model performance (R2) for best model # as chosen by BIC modelperf(alligator_PCO, scores = 1:4,           modelsupport = supp,           criterion = \"bic\", model = 1) #> Breakpoints: 6, 9, 12, 15, 19  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.992   0.988 #> PCO.2 0.975   0.964 #> PCO.3 0.892   0.849 #> PCO.4 0.772   0.681 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.968   0.956   # Plot that model for the first PCO score plotsegreg(alligator_PCO, scores = 1:4,            modelsupport = supp,            criterion = \"bic\", model = 1)   ## See `?simregions` for use with simulated data"},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a vertebra map — plotvertmap","title":"Plot a vertebra map — plotvertmap","text":"plotvertmap() plots map supplied vertebrae, optionally adding colors, marks, text identify existing estimated features vertebrae.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a vertebra map — plotvertmap","text":"","code":"plotvertmap(   x,   type = \"count\",   bps = NULL,   modelsupport = NULL,   criterion = \"aic\",   model = 1,   bpvar = NULL,   bp.sd = NULL,   sd.col = \"black\",   dropNA = FALSE,   text = FALSE,   name = NULL,   centraL = NULL,   reg.lim = NULL,   lim.col = \"black\",   block.cols = NULL,   block.lim = NULL )"},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a vertebra map — plotvertmap","text":"x regions_data, regions_pco, regions_sim object; output call process_measurements(), svdPCO(), simregions(), respectively. type string; labeling x-axis plot. Either \"count\" identify vertebra index (absolute position centraL supplied) \"percent\" identify percent vertebra count (percent total length centraL supplied). Abbreviations allowed. Default \"count\". bps optional vector containing region breakpoints. One bps, modelsupport, bpvar specified display regions breakpoints. See Details. modelsupport optional regions_modelsupport object; output call modelsupport(). One bps, modelsupport, bpvar specified display regions breakpoints. See Details. criterion string; criterion use select best model breakpoints displayed modelsupport specified. Ignored otherwise. Allowable options include \"aic\" use AICc \"bic\" use BIC. Abbreviations allowed. Default \"aic\". model numeric; model among best determined criterion breakpoints selected modelsupport supplied. Ignored otherwise. 1 best model, 2 second best, etc. Default 1. bpvar optional regions_BPvar object; output call calcBPvar(). One bps, modelsupport, bpvar specified display regions breakpoints. See Details. bp.sd optional vector standard deviations breakpoints (e.g., calculated calcBPvar()). bpvar supplied, weighted standard deviations used. sd.col bp.sd specified, color mark plot indicating standard deviations. Default black. dropNA logical; vertebrae missing, e.g., due subsampling starting analysis vertebra beyond first, whether remove missing vertebrae plot (TRUE) retain label missing (.e., lacking region) (FALSE). Default FALSE retain . text logical; whether print vertebra index vertebra. Default FALSE. name optional string containing label used left side plot. centraL optional numeric vector containing centrum length vertebra, used change size plotted vertebrae, string containing name variable original dataset containing centrum length. length equal number included vertebrae (.e., length original dataset). vertebrae centrum length 0 omitted. reg.lim vector breakpoints indicating region limits, e.g., anatomic regions. lim.col reg.lim specified, color lines separating regions. Default black. block.cols breakpoints specified (.e., using bps, modelsupport, bpvar) block.lim specified, vector color names hex codes, one region. specified, RColorBrewer::brewer.pal() name = \"paired\" used generate colors. block.lim specified, named list vectors color names hex codes. See Details. block.lim vector breakpoints indicating limits traditional regions, colored using block.cols. See Details.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a vertebra map — plotvertmap","text":"ggplot object can manipulated using ggplot2 syntax.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a vertebra map — plotvertmap","text":"plotvertmap() uses ggplot2::geom_rect() create plot. plots best viewed short height long width.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":"specifying-breakpoints-","dir":"Reference","previous_headings":"","what":"Specifying breakpoints:","title":"Plot a vertebra map — plotvertmap","text":"three ways specify regions plotvertmap(). First supply vector breakpoints directly bps. Second supply regions_modelsupport object modelsupport. supplied, criterion model arguments can used select sets breakpoints object used. model selects breakpoint model used (1 first best, 2 second best, etc.), criterion determines criterion (AICc BIC) used rank models. Third supply  regions_BPvar object bpvar. weighted average breakpoints used rounding (e.g., weighted average breakpoint 3.3 place vertebrae 1, 2, 3 region, weighted average breakpoint 3.9 place vertebrae 1, 2, 3, 4 region).","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":"using-block-cols-","dir":"Reference","previous_headings":"","what":"Using block.cols:","title":"Plot a vertebra map — plotvertmap","text":"block.lim specified, block.cols must specified list vectors colors, entry \"block\". Blocks predefined regions separate specified using arguments, e.g., traditional regions. region, common block found assigned region. color block supplied block.cols used color region. , block needs many colors regions assigned . example, regions 1 2 assigned block 1 (.e., block 1 common block regions), entry block.cols block must (least) 2 colors. incorrect number colors per block supplied, error thrown identifying blocks lacking colors. See Examples.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/plotvertmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a vertebra map — plotvertmap","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Plot vertebral map with specified breakpoints plotvertmap(alligator_PCO,             type = \"percent\",             name = \"Alligator\",             bps = c(8, 15, 19),             text = TRUE)   # Fit segmented regression models for 1 to 7 regions # using PCOs 1 to 4 and a continuous model with a # exhaustive search regionresults <- calcregions(alligator_PCO,                              scores = 1:4,                              noregions = 7,                              minvert = 3,                              cont = TRUE,                              exhaus = TRUE,                              verbose = FALSE)  # For each number of regions, identify best # model based on minimizing RSS bestresults <- modelselect(regionresults)  # Evaluate support for each model and rank models supp <- modelsupport(bestresults)  # Plot vertebral map with breakpoints corresponding to # best segmented regression model as determined by # AICc plotvertmap(alligator_PCO,             type = \"percent\",             name = \"Alligator\",             modelsupport = supp,             model = 1,             criterion = \"aic\",             text = TRUE)   # Plot vertebral map with breakpoints corresponding to # best segmented regression model as determined by # AICc, using centrum length to size vertebrae plotvertmap(alligator_PCO,             name = \"Alligator\",             modelsupport = supp,             model = 1,             criterion = \"aic\",             centraL = \"CL\",             text = TRUE)   # Compute Akaike-weighted location and SD of optimal # breakpoints using top 10% of models with 4 regions bpvar <- calcBPvar(regionresults, noregions = 5,                    pct = .1, criterion = \"aic\")  #Using weighted BPs and SDs from calcBPvar() plotvertmap(alligator_PCO, name = \"Dolphin\",             bpvar = bpvar,             text = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/porpoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurements from the vertebral column of three porpoises — porpoise","title":"Measurements from the vertebral column of three porpoises — porpoise","text":"Linear angular measurements Phocoena phocoena NRM 815072 (porpoise1), NRM 835011 (porpoise2), NRM 855083 (porpoise3).","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/porpoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurements from the vertebral column of three porpoises — porpoise","text":"","code":"data(\"porpoise\")"},{"path":"https://aagillet.github.io/MorphoRegions/reference/porpoise.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Measurements from the vertebral column of three porpoises — porpoise","text":"data frame 58, 56, 59 vertebrae (respectively) 16 measurements. Column 1, Vertebra, contains positional information.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/porpoise.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measurements from the vertebral column of three porpoises — porpoise","text":"Gillet, ., Frederich, B., Pierce, S. E., & Parmentier, E. (2022). Iterative habitat transitions associated morphological convergence backbone delphinoids. Journal Mammalian Evolution, 29(4), 931-946.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/process_measurements.html","id":null,"dir":"Reference","previous_headings":"","what":"Process vertebra measurements — process_measurements","title":"Process vertebra measurements — process_measurements","text":"process_measurements() initializes analysis workflow processing dataset vertebra measurements object usable MorphoRegions. processing includes identifying vertebra indices measurements filling missing values.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/process_measurements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process vertebra measurements — process_measurements","text":"","code":"process_measurements(data, pos = 1L, measurements, fillNA = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/process_measurements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process vertebra measurements — process_measurements","text":"data data.frame containing column vertebra indices measurements vertebra, list thereof multiple specimens. pos name index variable data containing vertebra indices. Default use first column. measurements names indices variables data containing relevant vertebra measurements. unspecified, use variables specified pos. fillNA logical; whether fill missing values using simple linear imputation. Default TRUE. See Details.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/process_measurements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process vertebra measurements — process_measurements","text":"regions_data object, list data.frames (one specimen) attributes containing metadata.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/process_measurements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process vertebra measurements — process_measurements","text":"rows missing values measurements removed. missing values non-removed rows present fillNA set TRUE, process_measurements() fills sequence missing values greater 2 length. numeric variables, uses linear interpolation, categorical variables, fills missing values surrounding non-missing values identical leaves missing otherwise. Otherwise, missing values left . list data frames supplied data, variables named measurements common across datasets stored measurement variables.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/process_measurements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process vertebra measurements — process_measurements","text":"","code":"# Process dataset; vertebra index in \"Vertebra\" column data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Process multiple datasets; vertebra index in first column data(\"porpoise\")  porpoise_data <- process_measurements(list(porpoise1,                                            porpoise2,                                            porpoise3),                                       pos = 1)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/simregions.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate regions data — simregions","title":"Simulate regions data — simregions","text":"simregions() simulates vertebrae PCOs satisfy certain constraints.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/simregions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate regions data — simregions","text":"","code":"simregions(   nvert,   nregions,   nvar = 1,   r2 = 0.95,   minvert = 3,   cont = TRUE,   sl.dif = 0 )  # S3 method for class 'regions_sim' plot(x, scores = 1, lines = TRUE, ...)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/simregions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate regions data — simregions","text":"nvert numeric; number vertebrae simulate data. nregions numeric; desired number regions simulated data. nvar numeric; number PCO axes simulate. Default 1. r2 numeric; vector containing \\(R^2\\) true segmented regression model simulated PCO. single value supplied, PCOs receive value. Otherwise, one value supplied simulated PCO. minvert numeric; minimum number vertebrae allowed region. Default 3. cont logical; whether use models continuous (TRUE) discontinuous (FALSE) breakpoints generate data. Default TRUE. sl.dif numeric; minimum required difference slopes adjacent regions, expressed proportion maximal difference allowable slopes. Must 0 1. See Details. x regions_sim object. scores numeric; simulated PCO scores simulated values plotted. lines logical; whether display simulated regression lines plot. Default TRUE. ... ignored.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/simregions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate regions data — simregions","text":"simregions() returns regions_sim object, contains vertebra indices Xvar entry, PCO scores Yvar entry, simulated breakpoints BPs entry, simulated model coefficients coefs entry, simulated error standard deviation ersd entry. attribute \"design\" contains design matrix, multiplied coefficients added random normal variate standard deviation equal error standard deviation yields observed PCO scores. plot() returns ggplot object can manipulated using ggplot2 syntax. plot similar produced plot.regions_pco() produced plotsegreg() except displayed lines (requested) true rather fitted regression lines.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/simregions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate regions data — simregions","text":"simregions() generates PCO scores requested vertebra certain conditions met. slopes region drawn uniform distribution limits -.5 .5. set slopes contains two adjacent slopes difference less sl.dif, rejected new one drawn. scaling PCOs determined slopes requested \\(R^2\\). PCOs necessarily order variable least variable traditional PCO analysis. Intercepts (intercept first region cont = TRUE intercept regions cont = FALSE) drawn uniform distribution limits \\(-n/4\\) \\(n/4\\), \\(n\\) number breakpoints, one less nregions. Intercepts first cont = TRUE determined slopes. cont, r2, sl.dif arguments control easy fitted segmented regression models capture true structure. cont = TRUE, can harder determine exactly regions begin end, especially sl.dif 0. r2 high, little variation around true line, fitted lines precise region boundaries clearer. sl.dif high, slopes adjacent regions different , easier detect region boundaries. Setting sl.dif .5 1 ensures slopes adjacent regions different signs.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/simregions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate regions data — simregions","text":"","code":"# Simulate 40 vertebra, 4 regions (3 breakpoints), 3 PCOs, # true model R2 of .9, continuous set.seed(11) sim <- simregions(nvert = 30, nregions = 4, nvar = 3, r2 = .95,                   minvert = 3, cont = TRUE)  sim #> A `regions_sim` object #>  - number of vertebrae: 30  #>  - number of regions: 4  #>  - breakpoints: 3, 7, 24  #>  - model type: continuous  #>  - number of PCO scores: 3  #> Use `plot()` to display the true lines and simulated data.  # Plot the true data-generating lines and breakpoints plot(sim, scores = 1:3)   # Run segmented regression models on simulated data, # up to 6 regions simresults <- calcregions(sim, scores = 1:3, noregions = 6,                           minvert = 3, cont = TRUE,                           verbose = FALSE)  summary(simresults) #>  Regions Possible Tested Saved Comp. method Saving method #>        1        1      1     1   Exhaustive           All #>        2       25     25    25   Exhaustive           All #>        3      253    253   253   Exhaustive           All #>        4     1330   1330  1330   Exhaustive           All #>        5     3876   3876  3876   Exhaustive           All #>        6     6188   6188  6188   Exhaustive           All  # Select best model for each number of regions (simmodels <- modelselect(simresults)) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5  sumRSS  RSS.1  RSS.2  RSS.3 #>        1    .    .    .    .    . 103.818 15.576 46.803 41.439 #>        2    6    .    .    .    .  73.800 13.871 30.766 29.163 #>        3    7   24    .    .    .  49.234 11.091  8.652 29.491 #>        4    3    6   24    .    .  46.607  9.202  8.568 28.836 #>        5    7   16   19   24    .  43.835 10.941  8.515 24.380 #>        6    3    6   16   19   24  41.046  9.077  8.291 23.679  # Evaluate support for each model and rank models (simsupp <- modelsupport(simmodels)) #> - Model support (AICc) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5  sumRSS    AICc deltaAIC model_lik Ak_weight #>        3    7   24    .    .    .  49.234 -20.691    0.000     1.000     0.972 #>        4    3    6   24    .    .  46.607 -13.592    7.099     0.029     0.028 #>        5    7   16   19   24    .  43.835  -5.639   15.052     0.001     0.001 #>        6    3    6   16   19   24  41.046   3.626   24.317     0.000     0.000 #>        2    6    .    .    .    .  73.800   4.925   25.615     0.000     0.000 #>        1    .    .    .    .    . 103.818  25.867   46.558     0.000     0.000 #> Region score: 3.03  #>  #> - Model support (BIC) #>  Regions BP 1 BP 2 BP 3 BP 4 BP 5  sumRSS    BIC deltaBIC model_lik BIC_weight #>        3    7   24    .    .    .  49.234  8.707    0.000     1.000      0.998 #>        4    3    6   24    .    .  46.607 21.771   13.064     0.001      0.001 #>        2    6    .    .    .    .  73.800 27.138   18.431     0.000      0.000 #>        5    7   16   19   24    .  43.835 34.253   25.546     0.000      0.000 #>        1    .    .    .    .    . 103.818 39.854   31.147     0.000      0.000 #>        6    3    6   16   19   24  41.046 46.336   37.629     0.000      0.000 #> Region score: 3  # AICc supports 3-4 regions  # Evaluate model performance of best model modelperf(sim, modelsupport = simsupp,           criterion = \"aic\", model = 1) #> Breakpoints: 7, 24  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.964   0.960 #> PCO.2 0.978   0.976 #> PCO.3 0.962   0.958 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.967   0.963  # Second best model (3 regions) does quite well, too modelperf(sim, modelsupport = simsupp,           criterion = \"aic\", model = 2) #> Breakpoints: 3, 6, 24  #>  #> - Univariate: #>          R² Adj. R² #> PCO.1 0.970   0.965 #> PCO.2 0.979   0.975 #> PCO.3 0.963   0.957 #>  #> - Multivariate: #>      R² Adj. R²  #>   0.969   0.964   #Plot best model fit plotsegreg(sim, scores = 1:3,            modelsupport = simsupp,            criterion = \"aic\", model = 1)   # Calculate variability of estimate breakpoints for # 3-region model; high uncertainty for breakpoints # 1 and 2. Note weighted value for breakpoint 2 # differs from that of best model bpvar <- calcBPvar(simresults, noregions = 4,                    pct = .05, criterion = \"aic\") bpvar #>        BP 1   BP 2   BP 3 #> wMean 5.746 15.083 24.275 #> wSD   1.726  6.290  0.732 #> - Computed using top 5.04% of models  # Plot estimated vertebral map with variability plotvertmap(sim, modelsupport = simsupp, model = 1,             criterion = \"aic\", text = TRUE)   # True map; pretty close plotvertmap(sim, bps = c(3, 7, 24),             text = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/subsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsample a dataset — subsample","title":"Subsample a dataset — subsample","text":"subsample() creates smaller version original dataset sampling rows. PCOs computed full dataset functions take regions_pco objects, subsample() requires regions_pco object input.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/subsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsample a dataset — subsample","text":"","code":"subsample(pco, sample = NULL, type = \"seq\")"},{"path":"https://aagillet.github.io/MorphoRegions/reference/subsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsample a dataset — subsample","text":"pco regions_pco object; output call svdPCO(). sample numeric; either number proportion vertebrae remain sampled dataset. NULL, original dataset returned. type string; type subsampling , either \"seq\" sampling sequence \"random\" random sampling. Default \"seq\". Abbreviations allowed.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/subsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsample a dataset — subsample","text":"regions_pco object, subset original supplied pco. original dataset stored attribute, contains subsampling indices.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/subsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsample a dataset — subsample","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data)  # Plot vertebrae before subsampling plotvertmap(alligator_PCO, dropNA = FALSE,             text = TRUE)   # Subsample data after estimating PCOs; subsample down # to 15 vertebrae alligator_PCO_sample <- subsample(alligator_PCO,                                   sample = 15)  # Plot vertebrae after subsampling; gray vertebrae # have been dropped plotvertmap(alligator_PCO_sample, dropNA = FALSE,             text = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/svdPCO.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PCO (principal co-ordinates analysis) based on SVD — svdPCO","title":"Calculate PCO (principal co-ordinates analysis) based on SVD — svdPCO","text":"Calculates distance matrix raw data, conducts PCO ordination using single value decomposition (SVD). differs PCO functions use stats::cmdscale() rely spectral decomposition.","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/svdPCO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PCO (principal co-ordinates analysis) based on SVD — svdPCO","text":"","code":"svdPCO(x, metric = \"gower\", scale = TRUE)"},{"path":"https://aagillet.github.io/MorphoRegions/reference/svdPCO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PCO (principal co-ordinates analysis) based on SVD — svdPCO","text":"x regions_data object; output call process_measurements(). metric string; distance matrix calculation metric. Allowable options include support cluster::daisy(), \"euclidean\", \"manhattan\", \"gower\". Default \"gower\". Abbreviations allowed. scale logical; whether scale variables prior including PCO estimation. Default TRUE, especially advisable using bootstrap select number PCOs use downstream analyses. Passed stand argument cluster::daisy(). Ignored metric = \"gower\".","code":""},{"path":"https://aagillet.github.io/MorphoRegions/reference/svdPCO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PCO (principal co-ordinates analysis) based on SVD — svdPCO","text":"regions_pco object, contains eigenvectors scores component eigenvalues eigen.val component. original dataset stored data attribute.","code":""},{"path":[]},{"path":"https://aagillet.github.io/MorphoRegions/reference/svdPCO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate PCO (principal co-ordinates analysis) based on SVD — svdPCO","text":"","code":"data(\"alligator\")  alligator_data <- process_measurements(alligator,                                        pos = \"Vertebra\")  # Compute PCOs alligator_PCO <- svdPCO(alligator_data,                         metric = \"gower\")  alligator_PCO #> - Scores: #>    PCO.1   PCO.2    PCO.3    PCO.4    PCO.5    PCO.6    PCO.7   PCO.8    PCO.9 #> 1 -0.334  0.2386  0.03426 -0.10271 -0.04904 -0.04760 -0.03210 -0.0341 -0.00170 #> 2 -0.284  0.1480 -0.02979 -0.01372  0.06610 -0.03238  0.05522  0.0245  0.01972 #> 3 -0.251  0.1106 -0.07088  0.05289  0.04260 -0.02385 -0.03003  0.0160 -0.03045 #> 4 -0.269  0.0116 -0.09275  0.07987 -0.00401  0.00907  0.00464  0.0231 -0.00295 #> 5 -0.243 -0.0695 -0.04831  0.01709 -0.05224  0.06285 -0.02271  0.0222  0.00941 #> 6 -0.268 -0.1863  0.00344 -0.00869 -0.00536  0.06317 -0.02513 -0.0205  0.02758 #>      PCO.10   PCO.11    PCO.12   PCO.13    PCO.14   PCO.15   PCO.16    PCO.17 #> 1  0.018670  0.00486  0.000221  0.00457  0.000393 -0.00198 -0.00860  0.000428 #> 2 -0.036114  0.00829 -0.027648 -0.01465  0.004165 -0.00981  0.00182 -0.003757 #> 3  0.000191 -0.02548  0.040047  0.00938  0.009774  0.02548  0.01119  0.007634 #> 4  0.025317  0.01864  0.003402  0.01498 -0.021639 -0.03377 -0.00674 -0.005831 #> 5  0.020205 -0.01407 -0.032932 -0.04248  0.003092  0.01802 -0.00649  0.005655 #> 6 -0.045238  0.02653  0.020049  0.02394  0.007392  0.00588  0.00227 -0.001655 #>      PCO.18   PCO.19    PCO.20    PCO.21 #> 1  0.001471  0.00337 -0.001435  0.000816 #> 2 -0.008612 -0.00597  0.001839  0.002614 #> 3 -0.000183 -0.00604  0.002491 -0.002083 #> 4  0.012116  0.01142 -0.002113 -0.001988 #> 5 -0.001655 -0.00516  0.002234 -0.001151 #> 6 -0.011215  0.00492 -0.000682  0.002172 #> (First 6 of 22 rows displayed.) #>  #> - Eigenvalues: #>  [1] 7.81e-01 3.39e-01 1.59e-01 4.17e-02 2.94e-02 2.73e-02 1.86e-02 1.32e-02 #>  [9] 1.29e-02 1.17e-02 8.97e-03 8.39e-03 7.81e-03 6.20e-03 5.88e-03 2.85e-03 #> [17] 2.12e-03 2.00e-03 1.38e-03 9.43e-04 3.79e-04 8.08e-17  # Plot PCOs against vertebra index plot(alligator_PCO, pco_y = 1:2)   # Plot PCOs against each other plot(alligator_PCO, pco_y = 1, pco_x = 2)"}]
